{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "# Analisis de la Penetracion de Internet Fijo en bogota para el 2024 y 2025"
      ],
      "metadata": {
        "id": "77VfZNCqF6q9"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Definición"
      ],
      "metadata": {
        "id": "f-6xLsfNGR2I"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## INTRODUCCION"
      ],
      "metadata": {
        "id": "rskbV1MtprMB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "El objetivo de este proyecto es analizar la penetración de internet fijo en diversas regiones de Colombia utilizando el conjunto de datos de Penetración de Internet Fijo de 2022 a 2023. Los datos incluyen campos como departamentos, municipios, número de accesos a internet fijo, estimaciones de población (DANE) e índices calculados. Nos centraremos en entender las tendencias, las disparidades regionales y las proyecciones futuras, en particular para Bogotá, en los años 2024 y 2025."
      ],
      "metadata": {
        "id": "ClqeRv5UpvYq"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Descripcion del problema"
      ],
      "metadata": {
        "id": "OaLIZ9UUrq0y"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "El principal problema es predecir el crecimiento de los accesos a internet fijo en Bogotá para los años 2024 y 2025. El conjunto de datos proporciona datos históricos que nos ayudarán a identificar patrones de crecimiento de la penetración de internet y a predecir cómo podría cambiar en el futuro. El desafío es utilizar las tendencias históricas, posiblemente combinadas con factores externos como el crecimiento de la población y el desarrollo de la infraestructura tecnológica, para hacer predicciones fiables."
      ],
      "metadata": {
        "id": "OB7Rsc8Cruz5"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "[Internet Fijo Penetración Departamentos\n",
        "](https://www.datos.gov.co/Ciencia-Tecnolog-a-e-Innovaci-n/Internet-Fijo-Penetraci-n-Departamentos/4py7-br84/about_data)\n",
        "\n",
        "**Número de suscriptores con acceso fijo a Internet** para cada uno de los departamentos de Colombia según los datos reportados por los proveedores al último día de cada trimestre . Basados en estos datos, y en las proyecciones del DANE para la población por departamento, consolidado 2015-4T al 2019 1T, se muestra el porcentaje de penetración de Internet fijo para cada trimestre.\n",
        "\n",
        "Última Actualización\n",
        "17 de septiembre de 2024\n",
        "\n",
        "Datos suministrados por\n",
        "Ministerio de Tecnologías de la Información y las Comunicaciones"
      ],
      "metadata": {
        "id": "tVF1qs7Ds1oW"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "wkjgADB4s1GK"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "##  Pasos para el análisis de los datos"
      ],
      "metadata": {
        "id": "ZPeso1hcr58t"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Limpieza de datos:** Verificar que no haya valores nulos o erróneos, especialmente en las columnas de año, trimestre, accesos a internet y población.\n",
        "\n",
        "**Análisis exploratorio de datos (EDA):** Observar las tendencias a lo largo del tiempo para distintos departamentos y municipios, analizando cómo ha evolucionado el índice de penetración de internet.\n",
        "\n",
        "**Filtrado de datos:** Extraer específicamente los datos de Bogotá para centrarnos en la predicción para esta ciudad.\n",
        "\n",
        "**Análisis de tendencias:** Visualizar el crecimiento de los accesos a internet fijo en Bogotá en el período 2022-2023.\n",
        "\n",
        "**Análisis de correlación:** Evaluar cómo los accesos a internet fijo están relacionados con el tamaño de la población y otros factores relevantes."
      ],
      "metadata": {
        "id": "8lRWxx6or9ZO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "10Uxbegf8MiR"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Enfoque para la predicción 2024-2025"
      ],
      "metadata": {
        "id": "S5F2R3p08ORE"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        " La predicción del crecimiento de los accesos a internet fijo en Bogotá se llevará a cabo utilizando redes neuronales. Las redes neuronales permiten capturar patrones complejos en los datos, lo cual es ideal para identificar tendencias y prever el crecimiento a largo plazo. El enfoque detallado es el siguiente:\n",
        "\n",
        "\n",
        "\n",
        "*   **Preparación de los datos:** Extraer y transformar los datos históricos de Bogotá, y calcular la tasa de crecimiento anual de los accesos a internet fijo.\n",
        "*   **Entrenamiento del modelo:** Entrenar una red neuronal utilizando los datos históricos, para que el modelo aprenda a capturar la tendencia en el.\n",
        "*  **Predicciones:** Utilizar la red neuronal entrenada para proyectar el crecimiento de los accesos a internet fijo en Bogotá para los años 2024 y 2025.\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "THdYQwFC8Sy_"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "BdrE_-1GBDeD"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Técnicas de análisis"
      ],
      "metadata": {
        "id": "8IYop1z0BDqk"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "\n",
        "\n",
        "*   Redes neuronales: La red neuronal será el modelo principal utilizado para la predicción de accesos a internet fijo, dada su capacidad para manejar relaciones no lineales y patrones complejos en los datos.\n",
        "*   Análisis de series de tiempo: Si se cuenta con datos de un período más extenso, podríamos complementar la predicción con métodos de series de tiempo, como ARIMA, para contrastar los resultados de la red neuronal.\n",
        "\n",
        "*  Visualización: Representar gráficamente el crecimiento de los accesos a internet en Bogotá a lo largo del tiempo y proyectar la tendencia para 2024-2025. Comparar visualmente el crecimiento de Bogotá con el de otros municipios clave para observar diferencias regionales.\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "cx6V8s4gBJOo"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Visualizaciones potenciales"
      ],
      "metadata": {
        "id": "J_tvNrWrCHIA"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "\n",
        "\n",
        "\n",
        "\n",
        "*   **Gráfico de series temporales:** Mostrar el crecimiento de los accesos a internet fijo en Bogotá durante 2022-2023, incluyendo las proyecciones para 2024-2025 basadas en el modelo de red neuronal.\n",
        "\n",
        "*  **Gráfico de barras:** Comparar el número total de accesos a internet fijo en Bogotá con otros municipios clave, destacando las diferencias en la penetración de internet.\n",
        "*   **Gráfico de tasa de crecimiento:** Visualizar la tasa de crecimiento de los accesos a internet en Bogotá, mostrando el ritmo de cambio a lo largo del tiempo.\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "7IrX_U7RCOIz"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Xr457Y107P_-"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Conclusión"
      ],
      "metadata": {
        "id": "tFp-bU39CiLb"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Al finalizar el análisis, se resumirán las tendencias y el escenario futuro basado en las predicciones para 2024-2025, señalando los factores que podrían influir en el crecimiento de los accesos a internet fijo en Bogotá. Además, se discutirá cómo el crecimiento de Bogotá se compara con otras regiones, considerando posibles diferencias en infraestructura y crecimiento poblacional."
      ],
      "metadata": {
        "id": "2m0CVML8CmTx"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Desarrollo"
      ],
      "metadata": {
        "id": "-mmODFPFGcov"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Importación de Librerías"
      ],
      "metadata": {
        "id": "lZsRS3Cp0j1f"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Primero, importaremos las librerías necesarias para el análisis y la predicción de los datos. Vamos a utilizar pandas para la manipulación de datos, matplotlib y seaborn para la visualización, y tensorflow para construir y entrenar la red neuronal."
      ],
      "metadata": {
        "id": "QWFLvKVw01wq"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import Dense\n"
      ],
      "metadata": {
        "id": "jxhcsgIPGuNl"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Leemos el conjunto de datos y mostramos sus primeras filas para entender su estructura."
      ],
      "metadata": {
        "id": "7lrlPvrT21ri"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# URL del archivo CSV en formato raw\n",
        "url = \"https://raw.githubusercontent.com/jvergara9208/TalentoTec_Jonathan/main/Proyecto/DataSet/Internet_Fijo_Penetraci_n_Municipio_20241019.csv\"\n",
        "\n",
        "# Cargar el archivo en un DataFrame\n",
        "df_carga = pd.read_csv(url)\n",
        "data=df_carga.copy()\n",
        "# Ver las primeras filas del DataFrame\n",
        "data.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 278
        },
        "id": "v5K5cm7h25ng",
        "outputId": "c8f0f141-08ca-4be1-ad10-836f73ddab88"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    AÑO  TRIMESTRE  COD_DEPARTAMENTO DEPARTAMENTO  COD_MUNICIPIO  MUNICIPIO  \\\n",
              "0  2023          2                 5    ANTIOQUIA           5353   HISPANIA   \n",
              "1  2023          1                17       CALDAS          17001  MANIZALES   \n",
              "2  2023          1                52       NARIÑO          52356    IPIALES   \n",
              "3  2022          4                27        CHOCÓ          27160   CÉRTEGUI   \n",
              "4  2022          3                15       BOYACÁ          15740  SIACHOQUE   \n",
              "\n",
              "   No. ACCESOS FIJOS A INTERNET  POBLACIÓN DANE INDICE  \n",
              "0                           495            5790   8,55  \n",
              "1                        102906          454494  22,64  \n",
              "2                         11312          120842   9,36  \n",
              "3                           179            5967   3,00  \n",
              "4                           116            7056   1,64  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e09d2148-dc6f-4fc0-a4a1-9051e9eb58d0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AÑO</th>\n",
              "      <th>TRIMESTRE</th>\n",
              "      <th>COD_DEPARTAMENTO</th>\n",
              "      <th>DEPARTAMENTO</th>\n",
              "      <th>COD_MUNICIPIO</th>\n",
              "      <th>MUNICIPIO</th>\n",
              "      <th>No. ACCESOS FIJOS A INTERNET</th>\n",
              "      <th>POBLACIÓN DANE</th>\n",
              "      <th>INDICE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2023</td>\n",
              "      <td>2</td>\n",
              "      <td>5</td>\n",
              "      <td>ANTIOQUIA</td>\n",
              "      <td>5353</td>\n",
              "      <td>HISPANIA</td>\n",
              "      <td>495</td>\n",
              "      <td>5790</td>\n",
              "      <td>8,55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2023</td>\n",
              "      <td>1</td>\n",
              "      <td>17</td>\n",
              "      <td>CALDAS</td>\n",
              "      <td>17001</td>\n",
              "      <td>MANIZALES</td>\n",
              "      <td>102906</td>\n",
              "      <td>454494</td>\n",
              "      <td>22,64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2023</td>\n",
              "      <td>1</td>\n",
              "      <td>52</td>\n",
              "      <td>NARIÑO</td>\n",
              "      <td>52356</td>\n",
              "      <td>IPIALES</td>\n",
              "      <td>11312</td>\n",
              "      <td>120842</td>\n",
              "      <td>9,36</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2022</td>\n",
              "      <td>4</td>\n",
              "      <td>27</td>\n",
              "      <td>CHOCÓ</td>\n",
              "      <td>27160</td>\n",
              "      <td>CÉRTEGUI</td>\n",
              "      <td>179</td>\n",
              "      <td>5967</td>\n",
              "      <td>3,00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2022</td>\n",
              "      <td>3</td>\n",
              "      <td>15</td>\n",
              "      <td>BOYACÁ</td>\n",
              "      <td>15740</td>\n",
              "      <td>SIACHOQUE</td>\n",
              "      <td>116</td>\n",
              "      <td>7056</td>\n",
              "      <td>1,64</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e09d2148-dc6f-4fc0-a4a1-9051e9eb58d0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e09d2148-dc6f-4fc0-a4a1-9051e9eb58d0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e09d2148-dc6f-4fc0-a4a1-9051e9eb58d0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-eb2235a8-a25f-4ad1-966e-a8816f0e4a5c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-eb2235a8-a25f-4ad1-966e-a8816f0e4a5c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-eb2235a8-a25f-4ad1-966e-a8816f0e4a5c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "data",
              "summary": "{\n  \"name\": \"data\",\n  \"rows\": 35578,\n  \"fields\": [\n    {\n      \"column\": \"A\\u00d1O\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2015,\n        \"max\": 2023,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          2019,\n          2022,\n          2017\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRIMESTRE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1,\n          3,\n          2\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"COD_DEPARTAMENTO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26,\n        \"min\": 5,\n        \"max\": 99,\n        \"num_unique_values\": 33,\n        \"samples\": [\n          81,\n          50,\n          8\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DEPARTAMENTO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 33,\n        \"samples\": [\n          \"ARAUCA\",\n          \"META\",\n          \"ATL\\u00c1NTICO\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"COD_MUNICIPIO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 26152,\n        \"min\": 5001,\n        \"max\": 99773,\n        \"num_unique_values\": 1120,\n        \"samples\": [\n          5480,\n          23464,\n          73678\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MUNICIPIO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1036,\n        \"samples\": [\n          \"ARCABUCO\",\n          \"SAN MATEO\",\n          \"CACHIR\\u00c1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No. ACCESOS FIJOS A INTERNET\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 67065,\n        \"min\": 1,\n        \"max\": 2638171,\n        \"num_unique_values\": 7102,\n        \"samples\": [\n          15549,\n          1106,\n          4164\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"POBLACI\\u00d3N DANE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 261170,\n        \"min\": 262,\n        \"max\": 7907281,\n        \"num_unique_values\": 8844,\n        \"samples\": [\n          13286,\n          7903,\n          13405\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"INDICE\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2719,\n        \"samples\": [\n          \"0,95\",\n          \"0,78\",\n          \"8,21\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 3
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Limpieza De datos\n",
        "\n",
        "Limpiaremos los datos eliminando valores faltantes y filtrando únicamente la información de Bogotá. Además, convertiremos los datos categóricos a valores numéricos si es necesario."
      ],
      "metadata": {
        "id": "dHf2gAvX32Wh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Eliminar valores nulos\n",
        "data = data.dropna()\n",
        "\n",
        "# Filtrar datos solo para Bogotá\n",
        "bogota_data = data[data['DEPARTAMENTO'] == 'BOGOTÁ D.C.']\n",
        "\n",
        "# Confirmar los datos después del filtro\n",
        "bogota_data.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 365
        },
        "id": "ZRnMh27Q37Wn",
        "outputId": "46c85d02-9839-4719-a755-e9680ae31c22"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       AÑO  TRIMESTRE  COD_DEPARTAMENTO DEPARTAMENTO  COD_MUNICIPIO  \\\n",
              "628   2022          4                11  BOGOTÁ D.C.          11001   \n",
              "906   2021          4                11  BOGOTÁ D.C.          11001   \n",
              "917   2022          3                11  BOGOTÁ D.C.          11001   \n",
              "2493  2023          3                11  BOGOTÁ D.C.          11001   \n",
              "6569  2021          3                11  BOGOTÁ D.C.          11001   \n",
              "\n",
              "         MUNICIPIO  No. ACCESOS FIJOS A INTERNET  POBLACIÓN DANE INDICE  \n",
              "628   BOGOTÁ, D.C.                       2269823         7873316  28,83  \n",
              "906   BOGOTÁ, D.C.                       2171274         7823334  27,75  \n",
              "917   BOGOTÁ, D.C.                       2261755         7873316  28,73  \n",
              "2493  BOGOTÁ, D.C.                       2251960         7907281  28,48  \n",
              "6569  BOGOTÁ, D.C.                       2157112         7823334  27,57  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-5b62bd99-70de-4d04-ba33-2940412bd33c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AÑO</th>\n",
              "      <th>TRIMESTRE</th>\n",
              "      <th>COD_DEPARTAMENTO</th>\n",
              "      <th>DEPARTAMENTO</th>\n",
              "      <th>COD_MUNICIPIO</th>\n",
              "      <th>MUNICIPIO</th>\n",
              "      <th>No. ACCESOS FIJOS A INTERNET</th>\n",
              "      <th>POBLACIÓN DANE</th>\n",
              "      <th>INDICE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>628</th>\n",
              "      <td>2022</td>\n",
              "      <td>4</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2269823</td>\n",
              "      <td>7873316</td>\n",
              "      <td>28,83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>906</th>\n",
              "      <td>2021</td>\n",
              "      <td>4</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2171274</td>\n",
              "      <td>7823334</td>\n",
              "      <td>27,75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>917</th>\n",
              "      <td>2022</td>\n",
              "      <td>3</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2261755</td>\n",
              "      <td>7873316</td>\n",
              "      <td>28,73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2493</th>\n",
              "      <td>2023</td>\n",
              "      <td>3</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2251960</td>\n",
              "      <td>7907281</td>\n",
              "      <td>28,48</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6569</th>\n",
              "      <td>2021</td>\n",
              "      <td>3</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2157112</td>\n",
              "      <td>7823334</td>\n",
              "      <td>27,57</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5b62bd99-70de-4d04-ba33-2940412bd33c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-5b62bd99-70de-4d04-ba33-2940412bd33c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-5b62bd99-70de-4d04-ba33-2940412bd33c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-698eee62-a395-4c5d-a314-9c912e5d815f\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-698eee62-a395-4c5d-a314-9c912e5d815f')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-698eee62-a395-4c5d-a314-9c912e5d815f button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "bogota_data",
              "summary": "{\n  \"name\": \"bogota_data\",\n  \"rows\": 32,\n  \"fields\": [\n    {\n      \"column\": \"A\\u00d1O\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2015,\n        \"max\": 2023,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          2015,\n          2021,\n          2017\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRIMESTRE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          3,\n          1,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"COD_DEPARTAMENTO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 11,\n        \"max\": 11,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DEPARTAMENTO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"BOGOT\\u00c1 D.C.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"COD_MUNICIPIO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 11001,\n        \"max\": 11001,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          11001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MUNICIPIO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"BOGOT\\u00c1, D.C.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No. ACCESOS FIJOS A INTERNET\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 241119,\n        \"min\": 1610511,\n        \"max\": 2638171,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          1916910\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"POBLACI\\u00d3N DANE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 236386,\n        \"min\": 7273265,\n        \"max\": 7907281,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7273265\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"INDICE\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"24,22\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Número de filas y columnas\n",
        "filas, columnas = bogota_data.shape\n",
        "print(f\"El DataFrame tiene {filas} filas y {columnas} columnas.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TfWN5QKc4p4r",
        "outputId": "79f27f83-e865-4cb5-ac9a-2719a11fc8c9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "El DataFrame tiene 32 filas y 9 columnas.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Ordenar el DataFrame por AÑO y TRIMESTRE\n",
        "bogota_data = bogota_data.sort_values(by=['AÑO', 'TRIMESTRE'], ascending=[True, True])\n",
        "\n",
        "# Mostrar el DataFrame ordenado\n",
        "bogota_data.head()\n",
        "\n",
        "# Configuración para mostrar todas las filas\n",
        "pd.set_option('display.max_rows', None)\n",
        "\n",
        "# Mostrar el DataFrame completo\n",
        "bogota_data\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "BtkQStZP4t_g",
        "outputId": "0a908b3f-4792-45db-fab9-6cdea12536e7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        AÑO  TRIMESTRE  COD_DEPARTAMENTO DEPARTAMENTO  COD_MUNICIPIO  \\\n",
              "18771  2015          4                11  BOGOTÁ D.C.          11001   \n",
              "30907  2016          1                11  BOGOTÁ D.C.          11001   \n",
              "18047  2016          2                11  BOGOTÁ D.C.          11001   \n",
              "24086  2016          3                11  BOGOTÁ D.C.          11001   \n",
              "19515  2016          4                11  BOGOTÁ D.C.          11001   \n",
              "19722  2017          1                11  BOGOTÁ D.C.          11001   \n",
              "31959  2017          2                11  BOGOTÁ D.C.          11001   \n",
              "32574  2017          3                11  BOGOTÁ D.C.          11001   \n",
              "17650  2017          4                11  BOGOTÁ D.C.          11001   \n",
              "30078  2018          1                11  BOGOTÁ D.C.          11001   \n",
              "18810  2018          2                11  BOGOTÁ D.C.          11001   \n",
              "31062  2018          3                11  BOGOTÁ D.C.          11001   \n",
              "27540  2018          4                11  BOGOTÁ D.C.          11001   \n",
              "19157  2019          1                11  BOGOTÁ D.C.          11001   \n",
              "15798  2019          2                11  BOGOTÁ D.C.          11001   \n",
              "28073  2019          3                11  BOGOTÁ D.C.          11001   \n",
              "32490  2019          4                11  BOGOTÁ D.C.          11001   \n",
              "33078  2020          1                11  BOGOTÁ D.C.          11001   \n",
              "13832  2020          2                11  BOGOTÁ D.C.          11001   \n",
              "32350  2020          3                11  BOGOTÁ D.C.          11001   \n",
              "15648  2020          4                11  BOGOTÁ D.C.          11001   \n",
              "8018   2021          1                11  BOGOTÁ D.C.          11001   \n",
              "10290  2021          2                11  BOGOTÁ D.C.          11001   \n",
              "6569   2021          3                11  BOGOTÁ D.C.          11001   \n",
              "906    2021          4                11  BOGOTÁ D.C.          11001   \n",
              "11998  2022          1                11  BOGOTÁ D.C.          11001   \n",
              "6908   2022          2                11  BOGOTÁ D.C.          11001   \n",
              "917    2022          3                11  BOGOTÁ D.C.          11001   \n",
              "628    2022          4                11  BOGOTÁ D.C.          11001   \n",
              "12251  2023          1                11  BOGOTÁ D.C.          11001   \n",
              "10346  2023          2                11  BOGOTÁ D.C.          11001   \n",
              "2493   2023          3                11  BOGOTÁ D.C.          11001   \n",
              "\n",
              "          MUNICIPIO  No. ACCESOS FIJOS A INTERNET  POBLACIÓN DANE INDICE  \n",
              "18771  BOGOTÁ, D.C.                       1610511         7273265  22,14  \n",
              "30907  BOGOTÁ, D.C.                       1647186         7300918  22,56  \n",
              "18047  BOGOTÁ, D.C.                       1681117         7300918  23,03  \n",
              "24086  BOGOTÁ, D.C.                       1719075         7300918  23,55  \n",
              "19515  BOGOTÁ, D.C.                       1728459         7300918  23,67  \n",
              "19722  BOGOTÁ, D.C.                       2638171         7337449  35,95  \n",
              "31959  BOGOTÁ, D.C.                       1776768         7337449  24,22  \n",
              "32574  BOGOTÁ, D.C.                       1807827         7337449  24,64  \n",
              "17650  BOGOTÁ, D.C.                       1818094         7337449  24,78  \n",
              "30078  BOGOTÁ, D.C.                       1826350         7412566  24,64  \n",
              "18810  BOGOTÁ, D.C.                       1857309         7412566  25,06  \n",
              "31062  BOGOTÁ, D.C.                       1875396         7412566  25,30  \n",
              "27540  BOGOTÁ, D.C.                       1876271         7412566  25,31  \n",
              "19157  BOGOTÁ, D.C.                       1874506         7592871  24,69  \n",
              "15798  BOGOTÁ, D.C.                       1890765         7592871  24,90  \n",
              "28073  BOGOTÁ, D.C.                       1915409         7592871  25,23  \n",
              "32490  BOGOTÁ, D.C.                       1916910         7592871  25,25  \n",
              "33078  BOGOTÁ, D.C.                       1957333         7732161  25,31  \n",
              "13832  BOGOTÁ, D.C.                       2025140         7732161  26,19  \n",
              "32350  BOGOTÁ, D.C.                       2069115         7732161  26,76  \n",
              "15648  BOGOTÁ, D.C.                       2088680         7732161  27,01  \n",
              "8018   BOGOTÁ, D.C.                       2139304         7823334  27,35  \n",
              "10290  BOGOTÁ, D.C.                       2165658         7823334  27,68  \n",
              "6569   BOGOTÁ, D.C.                       2157112         7823334  27,57  \n",
              "906    BOGOTÁ, D.C.                       2171274         7823334  27,75  \n",
              "11998  BOGOTÁ, D.C.                       2240695         7873316  28,46  \n",
              "6908   BOGOTÁ, D.C.                       2248809         7873316  28,56  \n",
              "917    BOGOTÁ, D.C.                       2261755         7873316  28,73  \n",
              "628    BOGOTÁ, D.C.                       2269823         7873316  28,83  \n",
              "12251  BOGOTÁ, D.C.                       2298520         7907281  29,07  \n",
              "10346  BOGOTÁ, D.C.                       2303696         7907281  29,13  \n",
              "2493   BOGOTÁ, D.C.                       2251960         7907281  28,48  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-391f5dbd-d878-414c-869a-7466ee73a4dd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AÑO</th>\n",
              "      <th>TRIMESTRE</th>\n",
              "      <th>COD_DEPARTAMENTO</th>\n",
              "      <th>DEPARTAMENTO</th>\n",
              "      <th>COD_MUNICIPIO</th>\n",
              "      <th>MUNICIPIO</th>\n",
              "      <th>No. ACCESOS FIJOS A INTERNET</th>\n",
              "      <th>POBLACIÓN DANE</th>\n",
              "      <th>INDICE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>18771</th>\n",
              "      <td>2015</td>\n",
              "      <td>4</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1610511</td>\n",
              "      <td>7273265</td>\n",
              "      <td>22,14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30907</th>\n",
              "      <td>2016</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1647186</td>\n",
              "      <td>7300918</td>\n",
              "      <td>22,56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18047</th>\n",
              "      <td>2016</td>\n",
              "      <td>2</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1681117</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23,03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24086</th>\n",
              "      <td>2016</td>\n",
              "      <td>3</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1719075</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23,55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19515</th>\n",
              "      <td>2016</td>\n",
              "      <td>4</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1728459</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23,67</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19722</th>\n",
              "      <td>2017</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2638171</td>\n",
              "      <td>7337449</td>\n",
              "      <td>35,95</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31959</th>\n",
              "      <td>2017</td>\n",
              "      <td>2</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1776768</td>\n",
              "      <td>7337449</td>\n",
              "      <td>24,22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32574</th>\n",
              "      <td>2017</td>\n",
              "      <td>3</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1807827</td>\n",
              "      <td>7337449</td>\n",
              "      <td>24,64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17650</th>\n",
              "      <td>2017</td>\n",
              "      <td>4</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1818094</td>\n",
              "      <td>7337449</td>\n",
              "      <td>24,78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30078</th>\n",
              "      <td>2018</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1826350</td>\n",
              "      <td>7412566</td>\n",
              "      <td>24,64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18810</th>\n",
              "      <td>2018</td>\n",
              "      <td>2</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1857309</td>\n",
              "      <td>7412566</td>\n",
              "      <td>25,06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31062</th>\n",
              "      <td>2018</td>\n",
              "      <td>3</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1875396</td>\n",
              "      <td>7412566</td>\n",
              "      <td>25,30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27540</th>\n",
              "      <td>2018</td>\n",
              "      <td>4</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1876271</td>\n",
              "      <td>7412566</td>\n",
              "      <td>25,31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19157</th>\n",
              "      <td>2019</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1874506</td>\n",
              "      <td>7592871</td>\n",
              "      <td>24,69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15798</th>\n",
              "      <td>2019</td>\n",
              "      <td>2</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1890765</td>\n",
              "      <td>7592871</td>\n",
              "      <td>24,90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28073</th>\n",
              "      <td>2019</td>\n",
              "      <td>3</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1915409</td>\n",
              "      <td>7592871</td>\n",
              "      <td>25,23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32490</th>\n",
              "      <td>2019</td>\n",
              "      <td>4</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1916910</td>\n",
              "      <td>7592871</td>\n",
              "      <td>25,25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33078</th>\n",
              "      <td>2020</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1957333</td>\n",
              "      <td>7732161</td>\n",
              "      <td>25,31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13832</th>\n",
              "      <td>2020</td>\n",
              "      <td>2</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2025140</td>\n",
              "      <td>7732161</td>\n",
              "      <td>26,19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32350</th>\n",
              "      <td>2020</td>\n",
              "      <td>3</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2069115</td>\n",
              "      <td>7732161</td>\n",
              "      <td>26,76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15648</th>\n",
              "      <td>2020</td>\n",
              "      <td>4</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2088680</td>\n",
              "      <td>7732161</td>\n",
              "      <td>27,01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8018</th>\n",
              "      <td>2021</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2139304</td>\n",
              "      <td>7823334</td>\n",
              "      <td>27,35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10290</th>\n",
              "      <td>2021</td>\n",
              "      <td>2</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2165658</td>\n",
              "      <td>7823334</td>\n",
              "      <td>27,68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6569</th>\n",
              "      <td>2021</td>\n",
              "      <td>3</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2157112</td>\n",
              "      <td>7823334</td>\n",
              "      <td>27,57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>906</th>\n",
              "      <td>2021</td>\n",
              "      <td>4</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2171274</td>\n",
              "      <td>7823334</td>\n",
              "      <td>27,75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11998</th>\n",
              "      <td>2022</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2240695</td>\n",
              "      <td>7873316</td>\n",
              "      <td>28,46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6908</th>\n",
              "      <td>2022</td>\n",
              "      <td>2</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2248809</td>\n",
              "      <td>7873316</td>\n",
              "      <td>28,56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>917</th>\n",
              "      <td>2022</td>\n",
              "      <td>3</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2261755</td>\n",
              "      <td>7873316</td>\n",
              "      <td>28,73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>628</th>\n",
              "      <td>2022</td>\n",
              "      <td>4</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2269823</td>\n",
              "      <td>7873316</td>\n",
              "      <td>28,83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12251</th>\n",
              "      <td>2023</td>\n",
              "      <td>1</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2298520</td>\n",
              "      <td>7907281</td>\n",
              "      <td>29,07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10346</th>\n",
              "      <td>2023</td>\n",
              "      <td>2</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2303696</td>\n",
              "      <td>7907281</td>\n",
              "      <td>29,13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2493</th>\n",
              "      <td>2023</td>\n",
              "      <td>3</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2251960</td>\n",
              "      <td>7907281</td>\n",
              "      <td>28,48</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-391f5dbd-d878-414c-869a-7466ee73a4dd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-391f5dbd-d878-414c-869a-7466ee73a4dd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-391f5dbd-d878-414c-869a-7466ee73a4dd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-47689f37-fd67-4598-a9b5-74c492b507e4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-47689f37-fd67-4598-a9b5-74c492b507e4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-47689f37-fd67-4598-a9b5-74c492b507e4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_befe2db8-7791-4e64-9aca-8234f3bca51d\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('bogota_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_befe2db8-7791-4e64-9aca-8234f3bca51d button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('bogota_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "bogota_data",
              "summary": "{\n  \"name\": \"bogota_data\",\n  \"rows\": 32,\n  \"fields\": [\n    {\n      \"column\": \"A\\u00d1O\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2,\n        \"min\": 2015,\n        \"max\": 2023,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          2022,\n          2016,\n          2020\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"TRIMESTRE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 1,\n        \"max\": 4,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          1,\n          3,\n          4\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"COD_DEPARTAMENTO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 11,\n        \"max\": 11,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DEPARTAMENTO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"BOGOT\\u00c1 D.C.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"COD_MUNICIPIO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 11001,\n        \"max\": 11001,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          11001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MUNICIPIO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"BOGOT\\u00c1, D.C.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No. ACCESOS FIJOS A INTERNET\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 241119,\n        \"min\": 1610511,\n        \"max\": 2638171,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          2298520\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"POBLACI\\u00d3N DANE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 236386,\n        \"min\": 7273265,\n        \"max\": 7907281,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7873316\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"INDICE\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"29,07\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "uniremos las columnas de trimestre y año\n",
        "\n",
        "para combinar las columnas AÑO y TRIMESTRE en una sola columna, vamos a usar el método .astype(str) para convertir ambos valores en texto y luego concatenarlos. Esto te permitirá crear una columna con un formato como AÑO-TRIMESTRE (por ejemplo, 2022-4)."
      ],
      "metadata": {
        "id": "4x9XiByREzwZ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Crear una nueva columna combinando AÑO y TRIMESTRE como número\n",
        "bogota_data['AÑO_TRIMESTRE'] = bogota_data['AÑO'].astype(str) + bogota_data['TRIMESTRE'].apply(lambda x: f\"{x:02d}\")\n",
        "\n",
        "# Opcional: eliminar las columnas originales\n",
        "bogota_data = bogota_data.drop(columns=['AÑO', 'TRIMESTRE'])\n",
        "\n",
        "# Convertir la columna AÑO_TRIMESTRE a entero\n",
        "bogota_data['AÑO_TRIMESTRE'] = bogota_data['AÑO_TRIMESTRE'].astype(int)\n",
        "\n",
        "# Reordenar las columnas para que AÑO_TRIMESTRE esté al principio\n",
        "cols = ['AÑO_TRIMESTRE'] + [col for col in bogota_data.columns if col != 'AÑO_TRIMESTRE']\n",
        "bogota_data = bogota_data[cols]\n",
        "\n",
        "# Ver el DataFrame actualizado\n",
        "bogota_data.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 365
        },
        "id": "D6vZBMf8E6se",
        "outputId": "1674c13f-d127-4ae6-c2bb-4f2dc290547e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       AÑO_TRIMESTRE  COD_DEPARTAMENTO DEPARTAMENTO  COD_MUNICIPIO  \\\n",
              "18771         201504                11  BOGOTÁ D.C.          11001   \n",
              "30907         201601                11  BOGOTÁ D.C.          11001   \n",
              "18047         201602                11  BOGOTÁ D.C.          11001   \n",
              "24086         201603                11  BOGOTÁ D.C.          11001   \n",
              "19515         201604                11  BOGOTÁ D.C.          11001   \n",
              "\n",
              "          MUNICIPIO  No. ACCESOS FIJOS A INTERNET  POBLACIÓN DANE INDICE  \n",
              "18771  BOGOTÁ, D.C.                       1610511         7273265  22,14  \n",
              "30907  BOGOTÁ, D.C.                       1647186         7300918  22,56  \n",
              "18047  BOGOTÁ, D.C.                       1681117         7300918  23,03  \n",
              "24086  BOGOTÁ, D.C.                       1719075         7300918  23,55  \n",
              "19515  BOGOTÁ, D.C.                       1728459         7300918  23,67  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a0f24d3a-b464-47b1-a434-fcbb1a381011\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AÑO_TRIMESTRE</th>\n",
              "      <th>COD_DEPARTAMENTO</th>\n",
              "      <th>DEPARTAMENTO</th>\n",
              "      <th>COD_MUNICIPIO</th>\n",
              "      <th>MUNICIPIO</th>\n",
              "      <th>No. ACCESOS FIJOS A INTERNET</th>\n",
              "      <th>POBLACIÓN DANE</th>\n",
              "      <th>INDICE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>18771</th>\n",
              "      <td>201504</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1610511</td>\n",
              "      <td>7273265</td>\n",
              "      <td>22,14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30907</th>\n",
              "      <td>201601</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1647186</td>\n",
              "      <td>7300918</td>\n",
              "      <td>22,56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18047</th>\n",
              "      <td>201602</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1681117</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23,03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24086</th>\n",
              "      <td>201603</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1719075</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23,55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19515</th>\n",
              "      <td>201604</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1728459</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23,67</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a0f24d3a-b464-47b1-a434-fcbb1a381011')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-a0f24d3a-b464-47b1-a434-fcbb1a381011 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-a0f24d3a-b464-47b1-a434-fcbb1a381011');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ed5d287e-585b-430b-a7b7-da52efb5f05e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ed5d287e-585b-430b-a7b7-da52efb5f05e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ed5d287e-585b-430b-a7b7-da52efb5f05e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "bogota_data",
              "summary": "{\n  \"name\": \"bogota_data\",\n  \"rows\": 32,\n  \"fields\": [\n    {\n      \"column\": \"A\\u00d1O_TRIMESTRE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 236,\n        \"min\": 201504,\n        \"max\": 202303,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          202301,\n          201903,\n          202104\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"COD_DEPARTAMENTO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 11,\n        \"max\": 11,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DEPARTAMENTO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"BOGOT\\u00c1 D.C.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"COD_MUNICIPIO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 11001,\n        \"max\": 11001,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          11001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MUNICIPIO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"BOGOT\\u00c1, D.C.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No. ACCESOS FIJOS A INTERNET\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 241119,\n        \"min\": 1610511,\n        \"max\": 2638171,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          2298520\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"POBLACI\\u00d3N DANE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 236386,\n        \"min\": 7273265,\n        \"max\": 7907281,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7873316\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"INDICE\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"29,07\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Configuración para mostrar todas las filas\n",
        "pd.set_option('display.max_rows', None)\n",
        "\n",
        "# Mostrar el DataFrame completo\n",
        "bogota_data\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "jJqQV4GBF-aK",
        "outputId": "58a352ca-8f4d-4faa-a4ef-3a3ccfaf9300"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       AÑO_TRIMESTRE  COD_DEPARTAMENTO DEPARTAMENTO  COD_MUNICIPIO  \\\n",
              "18771         201504                11  BOGOTÁ D.C.          11001   \n",
              "30907         201601                11  BOGOTÁ D.C.          11001   \n",
              "18047         201602                11  BOGOTÁ D.C.          11001   \n",
              "24086         201603                11  BOGOTÁ D.C.          11001   \n",
              "19515         201604                11  BOGOTÁ D.C.          11001   \n",
              "19722         201701                11  BOGOTÁ D.C.          11001   \n",
              "31959         201702                11  BOGOTÁ D.C.          11001   \n",
              "32574         201703                11  BOGOTÁ D.C.          11001   \n",
              "17650         201704                11  BOGOTÁ D.C.          11001   \n",
              "30078         201801                11  BOGOTÁ D.C.          11001   \n",
              "18810         201802                11  BOGOTÁ D.C.          11001   \n",
              "31062         201803                11  BOGOTÁ D.C.          11001   \n",
              "27540         201804                11  BOGOTÁ D.C.          11001   \n",
              "19157         201901                11  BOGOTÁ D.C.          11001   \n",
              "15798         201902                11  BOGOTÁ D.C.          11001   \n",
              "28073         201903                11  BOGOTÁ D.C.          11001   \n",
              "32490         201904                11  BOGOTÁ D.C.          11001   \n",
              "33078         202001                11  BOGOTÁ D.C.          11001   \n",
              "13832         202002                11  BOGOTÁ D.C.          11001   \n",
              "32350         202003                11  BOGOTÁ D.C.          11001   \n",
              "15648         202004                11  BOGOTÁ D.C.          11001   \n",
              "8018          202101                11  BOGOTÁ D.C.          11001   \n",
              "10290         202102                11  BOGOTÁ D.C.          11001   \n",
              "6569          202103                11  BOGOTÁ D.C.          11001   \n",
              "906           202104                11  BOGOTÁ D.C.          11001   \n",
              "11998         202201                11  BOGOTÁ D.C.          11001   \n",
              "6908          202202                11  BOGOTÁ D.C.          11001   \n",
              "917           202203                11  BOGOTÁ D.C.          11001   \n",
              "628           202204                11  BOGOTÁ D.C.          11001   \n",
              "12251         202301                11  BOGOTÁ D.C.          11001   \n",
              "10346         202302                11  BOGOTÁ D.C.          11001   \n",
              "2493          202303                11  BOGOTÁ D.C.          11001   \n",
              "\n",
              "          MUNICIPIO  No. ACCESOS FIJOS A INTERNET  POBLACIÓN DANE INDICE  \n",
              "18771  BOGOTÁ, D.C.                       1610511         7273265  22,14  \n",
              "30907  BOGOTÁ, D.C.                       1647186         7300918  22,56  \n",
              "18047  BOGOTÁ, D.C.                       1681117         7300918  23,03  \n",
              "24086  BOGOTÁ, D.C.                       1719075         7300918  23,55  \n",
              "19515  BOGOTÁ, D.C.                       1728459         7300918  23,67  \n",
              "19722  BOGOTÁ, D.C.                       2638171         7337449  35,95  \n",
              "31959  BOGOTÁ, D.C.                       1776768         7337449  24,22  \n",
              "32574  BOGOTÁ, D.C.                       1807827         7337449  24,64  \n",
              "17650  BOGOTÁ, D.C.                       1818094         7337449  24,78  \n",
              "30078  BOGOTÁ, D.C.                       1826350         7412566  24,64  \n",
              "18810  BOGOTÁ, D.C.                       1857309         7412566  25,06  \n",
              "31062  BOGOTÁ, D.C.                       1875396         7412566  25,30  \n",
              "27540  BOGOTÁ, D.C.                       1876271         7412566  25,31  \n",
              "19157  BOGOTÁ, D.C.                       1874506         7592871  24,69  \n",
              "15798  BOGOTÁ, D.C.                       1890765         7592871  24,90  \n",
              "28073  BOGOTÁ, D.C.                       1915409         7592871  25,23  \n",
              "32490  BOGOTÁ, D.C.                       1916910         7592871  25,25  \n",
              "33078  BOGOTÁ, D.C.                       1957333         7732161  25,31  \n",
              "13832  BOGOTÁ, D.C.                       2025140         7732161  26,19  \n",
              "32350  BOGOTÁ, D.C.                       2069115         7732161  26,76  \n",
              "15648  BOGOTÁ, D.C.                       2088680         7732161  27,01  \n",
              "8018   BOGOTÁ, D.C.                       2139304         7823334  27,35  \n",
              "10290  BOGOTÁ, D.C.                       2165658         7823334  27,68  \n",
              "6569   BOGOTÁ, D.C.                       2157112         7823334  27,57  \n",
              "906    BOGOTÁ, D.C.                       2171274         7823334  27,75  \n",
              "11998  BOGOTÁ, D.C.                       2240695         7873316  28,46  \n",
              "6908   BOGOTÁ, D.C.                       2248809         7873316  28,56  \n",
              "917    BOGOTÁ, D.C.                       2261755         7873316  28,73  \n",
              "628    BOGOTÁ, D.C.                       2269823         7873316  28,83  \n",
              "12251  BOGOTÁ, D.C.                       2298520         7907281  29,07  \n",
              "10346  BOGOTÁ, D.C.                       2303696         7907281  29,13  \n",
              "2493   BOGOTÁ, D.C.                       2251960         7907281  28,48  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4730f0e2-253e-4e8b-a124-fa3cd2c39984\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AÑO_TRIMESTRE</th>\n",
              "      <th>COD_DEPARTAMENTO</th>\n",
              "      <th>DEPARTAMENTO</th>\n",
              "      <th>COD_MUNICIPIO</th>\n",
              "      <th>MUNICIPIO</th>\n",
              "      <th>No. ACCESOS FIJOS A INTERNET</th>\n",
              "      <th>POBLACIÓN DANE</th>\n",
              "      <th>INDICE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>18771</th>\n",
              "      <td>201504</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1610511</td>\n",
              "      <td>7273265</td>\n",
              "      <td>22,14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30907</th>\n",
              "      <td>201601</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1647186</td>\n",
              "      <td>7300918</td>\n",
              "      <td>22,56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18047</th>\n",
              "      <td>201602</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1681117</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23,03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24086</th>\n",
              "      <td>201603</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1719075</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23,55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19515</th>\n",
              "      <td>201604</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1728459</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23,67</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19722</th>\n",
              "      <td>201701</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2638171</td>\n",
              "      <td>7337449</td>\n",
              "      <td>35,95</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31959</th>\n",
              "      <td>201702</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1776768</td>\n",
              "      <td>7337449</td>\n",
              "      <td>24,22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32574</th>\n",
              "      <td>201703</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1807827</td>\n",
              "      <td>7337449</td>\n",
              "      <td>24,64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17650</th>\n",
              "      <td>201704</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1818094</td>\n",
              "      <td>7337449</td>\n",
              "      <td>24,78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30078</th>\n",
              "      <td>201801</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1826350</td>\n",
              "      <td>7412566</td>\n",
              "      <td>24,64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18810</th>\n",
              "      <td>201802</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1857309</td>\n",
              "      <td>7412566</td>\n",
              "      <td>25,06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31062</th>\n",
              "      <td>201803</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1875396</td>\n",
              "      <td>7412566</td>\n",
              "      <td>25,30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27540</th>\n",
              "      <td>201804</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1876271</td>\n",
              "      <td>7412566</td>\n",
              "      <td>25,31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19157</th>\n",
              "      <td>201901</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1874506</td>\n",
              "      <td>7592871</td>\n",
              "      <td>24,69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15798</th>\n",
              "      <td>201902</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1890765</td>\n",
              "      <td>7592871</td>\n",
              "      <td>24,90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28073</th>\n",
              "      <td>201903</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1915409</td>\n",
              "      <td>7592871</td>\n",
              "      <td>25,23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32490</th>\n",
              "      <td>201904</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1916910</td>\n",
              "      <td>7592871</td>\n",
              "      <td>25,25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33078</th>\n",
              "      <td>202001</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1957333</td>\n",
              "      <td>7732161</td>\n",
              "      <td>25,31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13832</th>\n",
              "      <td>202002</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2025140</td>\n",
              "      <td>7732161</td>\n",
              "      <td>26,19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32350</th>\n",
              "      <td>202003</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2069115</td>\n",
              "      <td>7732161</td>\n",
              "      <td>26,76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15648</th>\n",
              "      <td>202004</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2088680</td>\n",
              "      <td>7732161</td>\n",
              "      <td>27,01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8018</th>\n",
              "      <td>202101</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2139304</td>\n",
              "      <td>7823334</td>\n",
              "      <td>27,35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10290</th>\n",
              "      <td>202102</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2165658</td>\n",
              "      <td>7823334</td>\n",
              "      <td>27,68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6569</th>\n",
              "      <td>202103</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2157112</td>\n",
              "      <td>7823334</td>\n",
              "      <td>27,57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>906</th>\n",
              "      <td>202104</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2171274</td>\n",
              "      <td>7823334</td>\n",
              "      <td>27,75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11998</th>\n",
              "      <td>202201</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2240695</td>\n",
              "      <td>7873316</td>\n",
              "      <td>28,46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6908</th>\n",
              "      <td>202202</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2248809</td>\n",
              "      <td>7873316</td>\n",
              "      <td>28,56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>917</th>\n",
              "      <td>202203</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2261755</td>\n",
              "      <td>7873316</td>\n",
              "      <td>28,73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>628</th>\n",
              "      <td>202204</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2269823</td>\n",
              "      <td>7873316</td>\n",
              "      <td>28,83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12251</th>\n",
              "      <td>202301</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2298520</td>\n",
              "      <td>7907281</td>\n",
              "      <td>29,07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10346</th>\n",
              "      <td>202302</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2303696</td>\n",
              "      <td>7907281</td>\n",
              "      <td>29,13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2493</th>\n",
              "      <td>202303</td>\n",
              "      <td>11</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>11001</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2251960</td>\n",
              "      <td>7907281</td>\n",
              "      <td>28,48</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4730f0e2-253e-4e8b-a124-fa3cd2c39984')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4730f0e2-253e-4e8b-a124-fa3cd2c39984 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4730f0e2-253e-4e8b-a124-fa3cd2c39984');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0e3f054d-56fc-4331-9c64-d3d2ae1a55ce\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0e3f054d-56fc-4331-9c64-d3d2ae1a55ce')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0e3f054d-56fc-4331-9c64-d3d2ae1a55ce button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_53f0bc4f-62e2-41e2-958e-e1fdb6e48cde\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('bogota_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_53f0bc4f-62e2-41e2-958e-e1fdb6e48cde button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('bogota_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "bogota_data",
              "summary": "{\n  \"name\": \"bogota_data\",\n  \"rows\": 32,\n  \"fields\": [\n    {\n      \"column\": \"A\\u00d1O_TRIMESTRE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 236,\n        \"min\": 201504,\n        \"max\": 202303,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          202301,\n          201903,\n          202104\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"COD_DEPARTAMENTO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 11,\n        \"max\": 11,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          11\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DEPARTAMENTO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"BOGOT\\u00c1 D.C.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"COD_MUNICIPIO\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0,\n        \"min\": 11001,\n        \"max\": 11001,\n        \"num_unique_values\": 1,\n        \"samples\": [\n          11001\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MUNICIPIO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"BOGOT\\u00c1, D.C.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No. ACCESOS FIJOS A INTERNET\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 241119,\n        \"min\": 1610511,\n        \"max\": 2638171,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          2298520\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"POBLACI\\u00d3N DANE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 236386,\n        \"min\": 7273265,\n        \"max\": 7907281,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7873316\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"INDICE\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"29,07\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        " eliminaremos las columnas COD_DEPARTAMENTO, COD_MUNICIPIO, DEPARTAMENTO y MUNICIPIO usaremos el método .drop() en pandas, especificando los nombres de las columnas, ya que estas no nos proporciona una informacion relevante.\n",
        "\n",
        " **ACLARACIÓN:**\n",
        "\n",
        "\n",
        "> *toda la información se ha filtrado para entender que es bogotá toda la información*\n",
        "\n"
      ],
      "metadata": {
        "id": "f-oz4bs6GOzb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Eliminar las columnas COD_DEPARTAMENTO, COD_MUNICIPIO, MUNICIPIO, DEPARTAMENTO\n",
        "bogota_data = bogota_data.drop(columns=['COD_DEPARTAMENTO', 'COD_MUNICIPIO', 'DEPARTAMENTO','MUNICIPIO'])\n",
        "\n",
        "# Ver el DataFrame actualizado\n",
        "bogota_data.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "QLwgYqSwGcol",
        "outputId": "2679934b-ae44-4d9e-ab11-5dabc430a91b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       AÑO_TRIMESTRE  No. ACCESOS FIJOS A INTERNET  POBLACIÓN DANE INDICE\n",
              "18771         201504                       1610511         7273265  22,14\n",
              "30907         201601                       1647186         7300918  22,56\n",
              "18047         201602                       1681117         7300918  23,03\n",
              "24086         201603                       1719075         7300918  23,55\n",
              "19515         201604                       1728459         7300918  23,67"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0c9a6183-747b-41fe-be84-d4d9442ab669\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AÑO_TRIMESTRE</th>\n",
              "      <th>No. ACCESOS FIJOS A INTERNET</th>\n",
              "      <th>POBLACIÓN DANE</th>\n",
              "      <th>INDICE</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>18771</th>\n",
              "      <td>201504</td>\n",
              "      <td>1610511</td>\n",
              "      <td>7273265</td>\n",
              "      <td>22,14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30907</th>\n",
              "      <td>201601</td>\n",
              "      <td>1647186</td>\n",
              "      <td>7300918</td>\n",
              "      <td>22,56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18047</th>\n",
              "      <td>201602</td>\n",
              "      <td>1681117</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23,03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24086</th>\n",
              "      <td>201603</td>\n",
              "      <td>1719075</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23,55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19515</th>\n",
              "      <td>201604</td>\n",
              "      <td>1728459</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23,67</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0c9a6183-747b-41fe-be84-d4d9442ab669')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0c9a6183-747b-41fe-be84-d4d9442ab669 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0c9a6183-747b-41fe-be84-d4d9442ab669');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a7323d93-30d5-46f2-a22c-b60dd9889825\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a7323d93-30d5-46f2-a22c-b60dd9889825')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a7323d93-30d5-46f2-a22c-b60dd9889825 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "bogota_data",
              "summary": "{\n  \"name\": \"bogota_data\",\n  \"rows\": 32,\n  \"fields\": [\n    {\n      \"column\": \"A\\u00d1O_TRIMESTRE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 236,\n        \"min\": 201504,\n        \"max\": 202303,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          202301,\n          201903,\n          202104\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No. ACCESOS FIJOS A INTERNET\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 241119,\n        \"min\": 1610511,\n        \"max\": 2638171,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          2298520,\n          1915409,\n          2171274\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"POBLACI\\u00d3N DANE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 236386,\n        \"min\": 7273265,\n        \"max\": 7907281,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7873316,\n          7300918,\n          7732161\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"INDICE\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"29,07\",\n          \"25,25\",\n          \"28,46\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "renombramos la columna indice por  INDICE a INDICE(%)\n",
        "\n"
      ],
      "metadata": {
        "id": "fSsV6oguG2WJ"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Renombrar la columna INDICE a INDICE(%)\n",
        "bogota_data = bogota_data.rename(columns={'INDICE': 'INDICE(%)'})\n",
        "\n",
        "# Ver el DataFrame actualizado\n",
        "# Configuración para mostrar todas las filas\n",
        "pd.set_option('display.max_rows', None)\n",
        "\n",
        "# Mostrar el DataFrame completo\n",
        "bogota_data\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "OKflvv6xG_Sh",
        "outputId": "67bd0c8d-fd3e-4c8e-941f-4bffc4c0ce01"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       AÑO_TRIMESTRE  No. ACCESOS FIJOS A INTERNET  POBLACIÓN DANE INDICE(%)\n",
              "18771         201504                       1610511         7273265     22,14\n",
              "30907         201601                       1647186         7300918     22,56\n",
              "18047         201602                       1681117         7300918     23,03\n",
              "24086         201603                       1719075         7300918     23,55\n",
              "19515         201604                       1728459         7300918     23,67\n",
              "19722         201701                       2638171         7337449     35,95\n",
              "31959         201702                       1776768         7337449     24,22\n",
              "32574         201703                       1807827         7337449     24,64\n",
              "17650         201704                       1818094         7337449     24,78\n",
              "30078         201801                       1826350         7412566     24,64\n",
              "18810         201802                       1857309         7412566     25,06\n",
              "31062         201803                       1875396         7412566     25,30\n",
              "27540         201804                       1876271         7412566     25,31\n",
              "19157         201901                       1874506         7592871     24,69\n",
              "15798         201902                       1890765         7592871     24,90\n",
              "28073         201903                       1915409         7592871     25,23\n",
              "32490         201904                       1916910         7592871     25,25\n",
              "33078         202001                       1957333         7732161     25,31\n",
              "13832         202002                       2025140         7732161     26,19\n",
              "32350         202003                       2069115         7732161     26,76\n",
              "15648         202004                       2088680         7732161     27,01\n",
              "8018          202101                       2139304         7823334     27,35\n",
              "10290         202102                       2165658         7823334     27,68\n",
              "6569          202103                       2157112         7823334     27,57\n",
              "906           202104                       2171274         7823334     27,75\n",
              "11998         202201                       2240695         7873316     28,46\n",
              "6908          202202                       2248809         7873316     28,56\n",
              "917           202203                       2261755         7873316     28,73\n",
              "628           202204                       2269823         7873316     28,83\n",
              "12251         202301                       2298520         7907281     29,07\n",
              "10346         202302                       2303696         7907281     29,13\n",
              "2493          202303                       2251960         7907281     28,48"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-af46825b-bd1d-43d3-a103-1f89fa31e30c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AÑO_TRIMESTRE</th>\n",
              "      <th>No. ACCESOS FIJOS A INTERNET</th>\n",
              "      <th>POBLACIÓN DANE</th>\n",
              "      <th>INDICE(%)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>18771</th>\n",
              "      <td>201504</td>\n",
              "      <td>1610511</td>\n",
              "      <td>7273265</td>\n",
              "      <td>22,14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30907</th>\n",
              "      <td>201601</td>\n",
              "      <td>1647186</td>\n",
              "      <td>7300918</td>\n",
              "      <td>22,56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18047</th>\n",
              "      <td>201602</td>\n",
              "      <td>1681117</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23,03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24086</th>\n",
              "      <td>201603</td>\n",
              "      <td>1719075</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23,55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19515</th>\n",
              "      <td>201604</td>\n",
              "      <td>1728459</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23,67</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19722</th>\n",
              "      <td>201701</td>\n",
              "      <td>2638171</td>\n",
              "      <td>7337449</td>\n",
              "      <td>35,95</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31959</th>\n",
              "      <td>201702</td>\n",
              "      <td>1776768</td>\n",
              "      <td>7337449</td>\n",
              "      <td>24,22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32574</th>\n",
              "      <td>201703</td>\n",
              "      <td>1807827</td>\n",
              "      <td>7337449</td>\n",
              "      <td>24,64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17650</th>\n",
              "      <td>201704</td>\n",
              "      <td>1818094</td>\n",
              "      <td>7337449</td>\n",
              "      <td>24,78</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30078</th>\n",
              "      <td>201801</td>\n",
              "      <td>1826350</td>\n",
              "      <td>7412566</td>\n",
              "      <td>24,64</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18810</th>\n",
              "      <td>201802</td>\n",
              "      <td>1857309</td>\n",
              "      <td>7412566</td>\n",
              "      <td>25,06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31062</th>\n",
              "      <td>201803</td>\n",
              "      <td>1875396</td>\n",
              "      <td>7412566</td>\n",
              "      <td>25,30</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27540</th>\n",
              "      <td>201804</td>\n",
              "      <td>1876271</td>\n",
              "      <td>7412566</td>\n",
              "      <td>25,31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19157</th>\n",
              "      <td>201901</td>\n",
              "      <td>1874506</td>\n",
              "      <td>7592871</td>\n",
              "      <td>24,69</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15798</th>\n",
              "      <td>201902</td>\n",
              "      <td>1890765</td>\n",
              "      <td>7592871</td>\n",
              "      <td>24,90</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28073</th>\n",
              "      <td>201903</td>\n",
              "      <td>1915409</td>\n",
              "      <td>7592871</td>\n",
              "      <td>25,23</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32490</th>\n",
              "      <td>201904</td>\n",
              "      <td>1916910</td>\n",
              "      <td>7592871</td>\n",
              "      <td>25,25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33078</th>\n",
              "      <td>202001</td>\n",
              "      <td>1957333</td>\n",
              "      <td>7732161</td>\n",
              "      <td>25,31</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13832</th>\n",
              "      <td>202002</td>\n",
              "      <td>2025140</td>\n",
              "      <td>7732161</td>\n",
              "      <td>26,19</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32350</th>\n",
              "      <td>202003</td>\n",
              "      <td>2069115</td>\n",
              "      <td>7732161</td>\n",
              "      <td>26,76</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15648</th>\n",
              "      <td>202004</td>\n",
              "      <td>2088680</td>\n",
              "      <td>7732161</td>\n",
              "      <td>27,01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8018</th>\n",
              "      <td>202101</td>\n",
              "      <td>2139304</td>\n",
              "      <td>7823334</td>\n",
              "      <td>27,35</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10290</th>\n",
              "      <td>202102</td>\n",
              "      <td>2165658</td>\n",
              "      <td>7823334</td>\n",
              "      <td>27,68</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6569</th>\n",
              "      <td>202103</td>\n",
              "      <td>2157112</td>\n",
              "      <td>7823334</td>\n",
              "      <td>27,57</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>906</th>\n",
              "      <td>202104</td>\n",
              "      <td>2171274</td>\n",
              "      <td>7823334</td>\n",
              "      <td>27,75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11998</th>\n",
              "      <td>202201</td>\n",
              "      <td>2240695</td>\n",
              "      <td>7873316</td>\n",
              "      <td>28,46</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6908</th>\n",
              "      <td>202202</td>\n",
              "      <td>2248809</td>\n",
              "      <td>7873316</td>\n",
              "      <td>28,56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>917</th>\n",
              "      <td>202203</td>\n",
              "      <td>2261755</td>\n",
              "      <td>7873316</td>\n",
              "      <td>28,73</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>628</th>\n",
              "      <td>202204</td>\n",
              "      <td>2269823</td>\n",
              "      <td>7873316</td>\n",
              "      <td>28,83</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12251</th>\n",
              "      <td>202301</td>\n",
              "      <td>2298520</td>\n",
              "      <td>7907281</td>\n",
              "      <td>29,07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10346</th>\n",
              "      <td>202302</td>\n",
              "      <td>2303696</td>\n",
              "      <td>7907281</td>\n",
              "      <td>29,13</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2493</th>\n",
              "      <td>202303</td>\n",
              "      <td>2251960</td>\n",
              "      <td>7907281</td>\n",
              "      <td>28,48</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-af46825b-bd1d-43d3-a103-1f89fa31e30c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-af46825b-bd1d-43d3-a103-1f89fa31e30c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-af46825b-bd1d-43d3-a103-1f89fa31e30c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b10bc3d0-624a-4713-84d7-a32b32a73226\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b10bc3d0-624a-4713-84d7-a32b32a73226')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b10bc3d0-624a-4713-84d7-a32b32a73226 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_c85d89ab-af8f-402d-b846-9ebda3b7df61\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('bogota_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_c85d89ab-af8f-402d-b846-9ebda3b7df61 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('bogota_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "bogota_data",
              "summary": "{\n  \"name\": \"bogota_data\",\n  \"rows\": 32,\n  \"fields\": [\n    {\n      \"column\": \"A\\u00d1O_TRIMESTRE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 236,\n        \"min\": 201504,\n        \"max\": 202303,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          202301,\n          201903,\n          202104\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No. ACCESOS FIJOS A INTERNET\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 241119,\n        \"min\": 1610511,\n        \"max\": 2638171,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          2298520,\n          1915409,\n          2171274\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"POBLACI\\u00d3N DANE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 236386,\n        \"min\": 7273265,\n        \"max\": 7907281,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7873316,\n          7300918,\n          7732161\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"INDICE(%)\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 30,\n        \"samples\": [\n          \"29,07\",\n          \"25,25\",\n          \"28,46\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "ejdr0b6MPDFv"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Guardar el DataFrame actualizado en un archivo CSV\n",
        "bogota_data.to_csv('bogota_data_actualizado.csv', index=False)\n",
        "\n",
        "# Descargar el archivo CSV generado\n",
        "from google.colab import files\n",
        "files.download('bogota_data_actualizado.csv')"
      ],
      "metadata": {
        "id": "sc7poKvoPDaD",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 17
        },
        "outputId": "c0425914-59c0-4067-9b40-8d3b3110d23b"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_f02e6303-ae36-4619-8af3-c8a294876a15\", \"bogota_data_actualizado.csv\", 1062)"
            ]
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "# Convertir \"INDICE(%)\" a formato numérico, reemplazando la coma por un punto decimal\n",
        "bogota_data['INDICE(%)'] = bogota_data['INDICE(%)'].str.replace(',', '.').astype(float)\n",
        "\n",
        "# Crear histogramas para las columnas numéricas\n",
        "plt.figure(figsize=(15, 5))\n",
        "\n",
        "# Histograma para \"No. ACCESOS FIJOS A INTERNET\"\n",
        "plt.subplot(1, 3, 1)\n",
        "sns.histplot(bogota_data['No. ACCESOS FIJOS A INTERNET'], bins=10, kde=True)\n",
        "plt.title('Distribución de No. ACCESOS FIJOS A INTERNET')\n",
        "plt.xlabel('Accesos Fijos a Internet')\n",
        "plt.ylabel('Frecuencia')\n",
        "\n",
        "# Histograma para \"POBLACIÓN DANE\"\n",
        "plt.subplot(1, 3, 2)\n",
        "sns.histplot(bogota_data['POBLACIÓN DANE'], bins=10, kde=True)\n",
        "plt.title('Distribución de POBLACIÓN DANE')\n",
        "plt.xlabel('Población DANE')\n",
        "plt.ylabel('Frecuencia')\n",
        "\n",
        "# Histograma para \"INDICE(%)\"\n",
        "plt.subplot(1, 3, 3)\n",
        "sns.histplot(bogota_data['INDICE(%)'], bins=10, kde=True)\n",
        "plt.title('Distribución de INDICE(%)')\n",
        "plt.xlabel('Índice (%)')\n",
        "plt.ylabel('Frecuencia')\n",
        "\n",
        "# Mostrar los gráficos\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "id": "w7DAQ0yHPC0z",
        "outputId": "e6df4822-cb63-4772-c133-d67b07efaeac"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1500x500 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#bogota_data = pd.read_csv('bogota_data_actualizado.csv')\n",
        "\n",
        "# Convertir AÑO_TRIMESTRE a string para ordenarlo correctamente en el gráfico\n",
        "bogota_data['AÑO_TRIMESTRE'] = bogota_data['AÑO_TRIMESTRE'].astype(str)\n",
        "\n",
        "# Ordenar por AÑO_TRIMESTRE para asegurar la secuencia temporal correcta\n",
        "bogota_data = bogota_data.sort_values(by='AÑO_TRIMESTRE')\n",
        "\n",
        "# Crear el gráfico de líneas\n",
        "plt.figure(figsize=(12, 6))\n",
        "plt.plot(bogota_data['AÑO_TRIMESTRE'], bogota_data['POBLACIÓN DANE'], marker='o', linestyle='-', color='b')\n",
        "plt.title('Evolución de la Población DANE por Trimestre')\n",
        "plt.xlabel('AÑO_TRIMESTRE')\n",
        "plt.ylabel('POBLACIÓN DANE')\n",
        "\n",
        "# Etiquetas para cada punto del gráfico con el valor completo\n",
        "for i, (x, y) in enumerate(zip(bogota_data['AÑO_TRIMESTRE'], bogota_data['POBLACIÓN DANE'])):\n",
        "    plt.text(x, y, f'{int(y):,}', ha='center', va='bottom', fontsize=8, rotation=45)\n",
        "\n",
        "# Personalizar el eje x solo con los trimestres presentes en los datos\n",
        "plt.xticks(ticks=range(len(bogota_data)), labels=bogota_data['AÑO_TRIMESTRE'], rotation=45)\n",
        "\n",
        "plt.grid(True)\n",
        "plt.tight_layout()\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 329
        },
        "id": "Y4FDa-YlS2zf",
        "outputId": "1ef2618c-f7f8-4033-fae3-79c6aa62d1ee"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "#bogota_data = pd.read_csv('bogota_data_actualizado.csv')\n",
        "\n",
        "# Convertir AÑO_TRIMESTRE a string para ordenar correctamente en el gráfico\n",
        "bogota_data['AÑO_TRIMESTRE'] = bogota_data['AÑO_TRIMESTRE'].astype(str)\n",
        "\n",
        "# Ordenar por AÑO_TRIMESTRE para asegurar la secuencia temporal correcta\n",
        "bogota_data = bogota_data.sort_values(by='AÑO_TRIMESTRE')\n",
        "\n",
        "# Configurar la figura\n",
        "plt.figure(figsize=(12, 6))\n",
        "\n",
        "# Graficar la Población DANE en azul\n",
        "plt.plot(bogota_data['AÑO_TRIMESTRE'], bogota_data['POBLACIÓN DANE'], marker='o', linestyle='-', color='b', label='Población DANE')\n",
        "\n",
        "# Graficar los Accesos Fijos a Internet en rojo\n",
        "plt.plot(bogota_data['AÑO_TRIMESTRE'], bogota_data['No. ACCESOS FIJOS A INTERNET'], marker='o', linestyle='-', color='r', label='Accesos Fijos a Internet')\n",
        "\n",
        "# Añadir título y etiquetas\n",
        "plt.title('Evolución de la Población DANE y Accesos Fijos a Internet por Trimestre')\n",
        "plt.xlabel('AÑO_TRIMESTRE')\n",
        "plt.ylabel('Cantidad')\n",
        "\n",
        "# Etiquetas para cada punto de la Población DANE\n",
        "for x, y in zip(bogota_data['AÑO_TRIMESTRE'], bogota_data['POBLACIÓN DANE']):\n",
        "    plt.text(x, y, f'{int(y):,}', ha='center', va='bottom', fontsize=8, rotation=45, color='blue')\n",
        "\n",
        "# Etiquetas para cada punto de Accesos Fijos a Internet\n",
        "for x, y in zip(bogota_data['AÑO_TRIMESTRE'], bogota_data['No. ACCESOS FIJOS A INTERNET']):\n",
        "    plt.text(x, y, f'{int(y):,}', ha='center', va='top', fontsize=8, rotation=45, color='red')\n",
        "\n",
        "# Mostrar la leyenda debajo del gráfico\n",
        "plt.legend(loc='upper center', bbox_to_anchor=(0.5, -0.15), ncol=2)\n",
        "\n",
        "# Configurar límites y cuadrícula\n",
        "plt.ylim(0, 10000000)  # Limitar el eje Y hasta 10 millones\n",
        "plt.grid(axis='y', linestyle='--', alpha=0.7)  # Cuadrícula solo en el eje Y\n",
        "\n",
        "# Personalizar el eje x solo con los trimestres presentes en los datos\n",
        "plt.xticks(ticks=range(len(bogota_data)), labels=bogota_data['AÑO_TRIMESTRE'], rotation=45)\n",
        "\n",
        "# Activar cuadrícula\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 328
        },
        "id": "vQq1qIvVTSsF",
        "outputId": "86f476a5-af92-4346-f57f-e70d50871296"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "Xz7k4BKgTx4Y"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import seaborn as sns\n",
        "\n",
        "# Histograma para \"POBLACIÓN DANE\" en millones\n",
        "plt.figure(figsize=(8, 6))\n",
        "sns.histplot(bogota_data['POBLACIÓN DANE'], bins=10, kde=True, color='c')\n",
        "plt.title('Distribución de la Población DANE en Millones')\n",
        "plt.xlabel('POBLACIÓN DANE (Millones)')\n",
        "plt.ylabel('Frecuencia')\n",
        "plt.show()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 526
        },
        "id": "TKowhQCeSKr8",
        "outputId": "72afbf34-b2f0-4762-e9c8-183a64eab220"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 800x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "HfxMEtg7PCqH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "Ahora se comprobara cuantos datos y de que periodos faltan"
      ],
      "metadata": {
        "id": "fkOOWNdwF9SU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# A continuación, se define la función para encontrar trimestres faltantes\n",
        "\n",
        "def encontrar_trimestres_faltantes(data, anio_inicial, anio_final):\n",
        "    faltantes = []\n",
        "    # Convertir la columna a string\n",
        "    data['AÑO_TRIMESTRE'] = data['AÑO_TRIMESTRE'].astype(str)\n",
        "\n",
        "    # Iterar sobre cada año en el rango\n",
        "    for anio in range(anio_inicial, anio_final + 1):\n",
        "        # Crear un conjunto con los trimestres esperados para el año actual\n",
        "        trimestres_esperados = {f\"{anio}0{t}\" for t in range(1, 5)}\n",
        "        # Filtrar los trimestres presentes en el DataFrame para el año actual\n",
        "        trimestres_presentes = set(data[data['AÑO_TRIMESTRE'].str.startswith(str(anio))]['AÑO_TRIMESTRE'])\n",
        "        # Calcular los trimestres faltantes comparando con los esperados\n",
        "        trimestres_faltantes = trimestres_esperados - trimestres_presentes\n",
        "        # Agregar los trimestres faltantes a la lista\n",
        "        faltantes.extend(sorted(trimestres_faltantes))\n",
        "\n",
        "    return faltantes\n",
        "\n",
        "# Usar la función con los años inicial y final\n",
        "anio_inicial = 2015\n",
        "anio_final = 2025\n",
        "trimestres_faltantes = encontrar_trimestres_faltantes(bogota_data, anio_inicial, anio_final)\n",
        "\n",
        "# Mostrar los trimestres faltantes\n",
        "print(trimestres_faltantes)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ycsMxt-jVFeb",
        "outputId": "f6e0cea7-ac78-4ee9-aa5e-a81a5e3ab9d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['201501', '201502', '201503', '202304', '202401', '202402', '202403', '202404', '202501', '202502', '202503', '202504']\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Para calcular el índice de penetración de internet, podemos partir de la fórmula común para este tipo de análisis, que relaciona el número de accesos a internet con la población. El índice suele calcularse como:\n",
        "$$\n",
        "\\text{ÍNDICE} = \\left( \\frac{\\text{No. de Accesos Fijos a Internet}}{\\text{Población DANE}} \\right) \\times 100\n",
        "$$\n",
        "Si tu dataset incluye los campos **No. de Accesos Fijos a Internet** y **Población DANE**, puedes aplicar esta fórmula a cada fila para comparar el índice calculado con el índice que está en el archivo.\n",
        "\n",
        "En resumen, la comparación del índice calculado con el índice existente nos permitirá:\n",
        "\n",
        "*   Validar la precisión de los datos.\n",
        "*   los estándares utilizados.\n",
        "*   Mejorar la fiabilidad de las predicciones.\n",
        "*   Detectar posibles errores o inconsistencias que deban corregirse.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "### Paso para el cálculo y comparación del índice\n",
        "Primero, carga el archivo actualizado, calcula el índice y verifica si coincide con el índice que está en la columna existente.\n"
      ],
      "metadata": {
        "id": "n5JW3dWCE5ez"
      }
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "DtHHt9qTq30k"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Crear una copia del DataFrame bogota_data\n",
        "bogota_data_comparar = bogota_data.copy()\n",
        "bogota_data_comparar.head()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 223
        },
        "id": "kF1xFux-pYbA",
        "outputId": "666f067f-0ad3-47b4-bceb-48a8d3205967"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      AÑO_TRIMESTRE  No. ACCESOS FIJOS A INTERNET  POBLACIÓN DANE  INDICE(%)\n",
              "18771        201504                       1610511         7273265      22.14\n",
              "30907        201601                       1647186         7300918      22.56\n",
              "18047        201602                       1681117         7300918      23.03\n",
              "24086        201603                       1719075         7300918      23.55\n",
              "19515        201604                       1728459         7300918      23.67"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-20e272ac-061d-4e53-a972-016adb0414f4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AÑO_TRIMESTRE</th>\n",
              "      <th>No. ACCESOS FIJOS A INTERNET</th>\n",
              "      <th>POBLACIÓN DANE</th>\n",
              "      <th>INDICE(%)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>18771</th>\n",
              "      <td>201504</td>\n",
              "      <td>1610511</td>\n",
              "      <td>7273265</td>\n",
              "      <td>22.14</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30907</th>\n",
              "      <td>201601</td>\n",
              "      <td>1647186</td>\n",
              "      <td>7300918</td>\n",
              "      <td>22.56</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18047</th>\n",
              "      <td>201602</td>\n",
              "      <td>1681117</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23.03</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24086</th>\n",
              "      <td>201603</td>\n",
              "      <td>1719075</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23.55</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19515</th>\n",
              "      <td>201604</td>\n",
              "      <td>1728459</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23.67</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-20e272ac-061d-4e53-a972-016adb0414f4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-20e272ac-061d-4e53-a972-016adb0414f4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-20e272ac-061d-4e53-a972-016adb0414f4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f927de95-f52f-4a68-801f-5978ed868c17\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f927de95-f52f-4a68-801f-5978ed868c17')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f927de95-f52f-4a68-801f-5978ed868c17 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "bogota_data_comparar",
              "summary": "{\n  \"name\": \"bogota_data_comparar\",\n  \"rows\": 32,\n  \"fields\": [\n    {\n      \"column\": \"A\\u00d1O_TRIMESTRE\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 32,\n        \"samples\": [\n          \"202301\",\n          \"201903\",\n          \"202104\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No. ACCESOS FIJOS A INTERNET\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 241119,\n        \"min\": 1610511,\n        \"max\": 2638171,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          2298520,\n          1915409,\n          2171274\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"POBLACI\\u00d3N DANE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 236386,\n        \"min\": 7273265,\n        \"max\": 7907281,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7873316,\n          7300918,\n          7732161\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"INDICE(%)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.682051152960505,\n        \"min\": 22.14,\n        \"max\": 35.95,\n        \"num_unique_values\": 30,\n        \"samples\": [\n          29.07,\n          25.25,\n          28.46\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calcular el índice de penetración en la copia\n",
        "bogota_data_comparar['ÍNDICE Calculado'] = (bogota_data_comparar['No. ACCESOS FIJOS A INTERNET'] / bogota_data_comparar['POBLACIÓN DANE']) * 100\n",
        "\n",
        "# Determinar si el índice calculado coincide con el índice existente\n",
        "bogota_data_comparar['Coincide'] = bogota_data_comparar['ÍNDICE Calculado'].round(2) == bogota_data_comparar['INDICE(%)'].round(2)\n",
        "\n",
        "# Imprimir el DataFrame comparativo con columnas relevantes\n",
        "bogota_data_comparar[['AÑO_TRIMESTRE', 'No. ACCESOS FIJOS A INTERNET', 'POBLACIÓN DANE', 'INDICE(%)', 'ÍNDICE Calculado', 'Coincide']]\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "7B3N01h1qZ5e",
        "outputId": "1ff4fbe7-9ea5-4077-d429-1d108919fd59"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      AÑO_TRIMESTRE  No. ACCESOS FIJOS A INTERNET  POBLACIÓN DANE  INDICE(%)  \\\n",
              "18771        201504                       1610511         7273265      22.14   \n",
              "30907        201601                       1647186         7300918      22.56   \n",
              "18047        201602                       1681117         7300918      23.03   \n",
              "24086        201603                       1719075         7300918      23.55   \n",
              "19515        201604                       1728459         7300918      23.67   \n",
              "19722        201701                       2638171         7337449      35.95   \n",
              "31959        201702                       1776768         7337449      24.22   \n",
              "32574        201703                       1807827         7337449      24.64   \n",
              "17650        201704                       1818094         7337449      24.78   \n",
              "30078        201801                       1826350         7412566      24.64   \n",
              "18810        201802                       1857309         7412566      25.06   \n",
              "31062        201803                       1875396         7412566      25.30   \n",
              "27540        201804                       1876271         7412566      25.31   \n",
              "19157        201901                       1874506         7592871      24.69   \n",
              "15798        201902                       1890765         7592871      24.90   \n",
              "28073        201903                       1915409         7592871      25.23   \n",
              "32490        201904                       1916910         7592871      25.25   \n",
              "33078        202001                       1957333         7732161      25.31   \n",
              "13832        202002                       2025140         7732161      26.19   \n",
              "32350        202003                       2069115         7732161      26.76   \n",
              "15648        202004                       2088680         7732161      27.01   \n",
              "8018         202101                       2139304         7823334      27.35   \n",
              "10290        202102                       2165658         7823334      27.68   \n",
              "6569         202103                       2157112         7823334      27.57   \n",
              "906          202104                       2171274         7823334      27.75   \n",
              "11998        202201                       2240695         7873316      28.46   \n",
              "6908         202202                       2248809         7873316      28.56   \n",
              "917          202203                       2261755         7873316      28.73   \n",
              "628          202204                       2269823         7873316      28.83   \n",
              "12251        202301                       2298520         7907281      29.07   \n",
              "10346        202302                       2303696         7907281      29.13   \n",
              "2493         202303                       2251960         7907281      28.48   \n",
              "\n",
              "       ÍNDICE Calculado  Coincide  \n",
              "18771         22.142889      True  \n",
              "30907         22.561355      True  \n",
              "18047         23.026104      True  \n",
              "24086         23.546012      True  \n",
              "19515         23.674543      True  \n",
              "19722         35.954880      True  \n",
              "31959         24.215064      True  \n",
              "32574         24.638359      True  \n",
              "17650         24.778285      True  \n",
              "30078         24.638566      True  \n",
              "18810         25.056222      True  \n",
              "31062         25.300227      True  \n",
              "27540         25.312031      True  \n",
              "19157         24.687710      True  \n",
              "15798         24.901845      True  \n",
              "28073         25.226413      True  \n",
              "32490         25.246182      True  \n",
              "33078         25.314178      True  \n",
              "13832         26.191126      True  \n",
              "32350         26.759854      True  \n",
              "15648         27.012888      True  \n",
              "8018          27.345170      True  \n",
              "10290         27.682034      True  \n",
              "6569          27.572797      True  \n",
              "906           27.753820      True  \n",
              "11998         28.459356      True  \n",
              "6908          28.562413      True  \n",
              "917           28.726841      True  \n",
              "628           28.829314      True  \n",
              "12251         29.068399      True  \n",
              "10346         29.133858      True  \n",
              "2493          28.479575      True  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ca39a9e8-de55-4d8a-a127-82169b4b75dc\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AÑO_TRIMESTRE</th>\n",
              "      <th>No. ACCESOS FIJOS A INTERNET</th>\n",
              "      <th>POBLACIÓN DANE</th>\n",
              "      <th>INDICE(%)</th>\n",
              "      <th>ÍNDICE Calculado</th>\n",
              "      <th>Coincide</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>18771</th>\n",
              "      <td>201504</td>\n",
              "      <td>1610511</td>\n",
              "      <td>7273265</td>\n",
              "      <td>22.14</td>\n",
              "      <td>22.142889</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30907</th>\n",
              "      <td>201601</td>\n",
              "      <td>1647186</td>\n",
              "      <td>7300918</td>\n",
              "      <td>22.56</td>\n",
              "      <td>22.561355</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18047</th>\n",
              "      <td>201602</td>\n",
              "      <td>1681117</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23.03</td>\n",
              "      <td>23.026104</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24086</th>\n",
              "      <td>201603</td>\n",
              "      <td>1719075</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23.55</td>\n",
              "      <td>23.546012</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19515</th>\n",
              "      <td>201604</td>\n",
              "      <td>1728459</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23.67</td>\n",
              "      <td>23.674543</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19722</th>\n",
              "      <td>201701</td>\n",
              "      <td>2638171</td>\n",
              "      <td>7337449</td>\n",
              "      <td>35.95</td>\n",
              "      <td>35.954880</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31959</th>\n",
              "      <td>201702</td>\n",
              "      <td>1776768</td>\n",
              "      <td>7337449</td>\n",
              "      <td>24.22</td>\n",
              "      <td>24.215064</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32574</th>\n",
              "      <td>201703</td>\n",
              "      <td>1807827</td>\n",
              "      <td>7337449</td>\n",
              "      <td>24.64</td>\n",
              "      <td>24.638359</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17650</th>\n",
              "      <td>201704</td>\n",
              "      <td>1818094</td>\n",
              "      <td>7337449</td>\n",
              "      <td>24.78</td>\n",
              "      <td>24.778285</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30078</th>\n",
              "      <td>201801</td>\n",
              "      <td>1826350</td>\n",
              "      <td>7412566</td>\n",
              "      <td>24.64</td>\n",
              "      <td>24.638566</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18810</th>\n",
              "      <td>201802</td>\n",
              "      <td>1857309</td>\n",
              "      <td>7412566</td>\n",
              "      <td>25.06</td>\n",
              "      <td>25.056222</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31062</th>\n",
              "      <td>201803</td>\n",
              "      <td>1875396</td>\n",
              "      <td>7412566</td>\n",
              "      <td>25.30</td>\n",
              "      <td>25.300227</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27540</th>\n",
              "      <td>201804</td>\n",
              "      <td>1876271</td>\n",
              "      <td>7412566</td>\n",
              "      <td>25.31</td>\n",
              "      <td>25.312031</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19157</th>\n",
              "      <td>201901</td>\n",
              "      <td>1874506</td>\n",
              "      <td>7592871</td>\n",
              "      <td>24.69</td>\n",
              "      <td>24.687710</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15798</th>\n",
              "      <td>201902</td>\n",
              "      <td>1890765</td>\n",
              "      <td>7592871</td>\n",
              "      <td>24.90</td>\n",
              "      <td>24.901845</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28073</th>\n",
              "      <td>201903</td>\n",
              "      <td>1915409</td>\n",
              "      <td>7592871</td>\n",
              "      <td>25.23</td>\n",
              "      <td>25.226413</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32490</th>\n",
              "      <td>201904</td>\n",
              "      <td>1916910</td>\n",
              "      <td>7592871</td>\n",
              "      <td>25.25</td>\n",
              "      <td>25.246182</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33078</th>\n",
              "      <td>202001</td>\n",
              "      <td>1957333</td>\n",
              "      <td>7732161</td>\n",
              "      <td>25.31</td>\n",
              "      <td>25.314178</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13832</th>\n",
              "      <td>202002</td>\n",
              "      <td>2025140</td>\n",
              "      <td>7732161</td>\n",
              "      <td>26.19</td>\n",
              "      <td>26.191126</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32350</th>\n",
              "      <td>202003</td>\n",
              "      <td>2069115</td>\n",
              "      <td>7732161</td>\n",
              "      <td>26.76</td>\n",
              "      <td>26.759854</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15648</th>\n",
              "      <td>202004</td>\n",
              "      <td>2088680</td>\n",
              "      <td>7732161</td>\n",
              "      <td>27.01</td>\n",
              "      <td>27.012888</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8018</th>\n",
              "      <td>202101</td>\n",
              "      <td>2139304</td>\n",
              "      <td>7823334</td>\n",
              "      <td>27.35</td>\n",
              "      <td>27.345170</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10290</th>\n",
              "      <td>202102</td>\n",
              "      <td>2165658</td>\n",
              "      <td>7823334</td>\n",
              "      <td>27.68</td>\n",
              "      <td>27.682034</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6569</th>\n",
              "      <td>202103</td>\n",
              "      <td>2157112</td>\n",
              "      <td>7823334</td>\n",
              "      <td>27.57</td>\n",
              "      <td>27.572797</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>906</th>\n",
              "      <td>202104</td>\n",
              "      <td>2171274</td>\n",
              "      <td>7823334</td>\n",
              "      <td>27.75</td>\n",
              "      <td>27.753820</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11998</th>\n",
              "      <td>202201</td>\n",
              "      <td>2240695</td>\n",
              "      <td>7873316</td>\n",
              "      <td>28.46</td>\n",
              "      <td>28.459356</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6908</th>\n",
              "      <td>202202</td>\n",
              "      <td>2248809</td>\n",
              "      <td>7873316</td>\n",
              "      <td>28.56</td>\n",
              "      <td>28.562413</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>917</th>\n",
              "      <td>202203</td>\n",
              "      <td>2261755</td>\n",
              "      <td>7873316</td>\n",
              "      <td>28.73</td>\n",
              "      <td>28.726841</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>628</th>\n",
              "      <td>202204</td>\n",
              "      <td>2269823</td>\n",
              "      <td>7873316</td>\n",
              "      <td>28.83</td>\n",
              "      <td>28.829314</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12251</th>\n",
              "      <td>202301</td>\n",
              "      <td>2298520</td>\n",
              "      <td>7907281</td>\n",
              "      <td>29.07</td>\n",
              "      <td>29.068399</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10346</th>\n",
              "      <td>202302</td>\n",
              "      <td>2303696</td>\n",
              "      <td>7907281</td>\n",
              "      <td>29.13</td>\n",
              "      <td>29.133858</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2493</th>\n",
              "      <td>202303</td>\n",
              "      <td>2251960</td>\n",
              "      <td>7907281</td>\n",
              "      <td>28.48</td>\n",
              "      <td>28.479575</td>\n",
              "      <td>True</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ca39a9e8-de55-4d8a-a127-82169b4b75dc')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ca39a9e8-de55-4d8a-a127-82169b4b75dc button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ca39a9e8-de55-4d8a-a127-82169b4b75dc');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b9587283-bfc6-4cd0-a545-4533a49077b9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b9587283-bfc6-4cd0-a545-4533a49077b9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b9587283-bfc6-4cd0-a545-4533a49077b9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"bogota_data_comparar[['A\\u00d1O_TRIMESTRE', 'No\",\n  \"rows\": 32,\n  \"fields\": [\n    {\n      \"column\": \"A\\u00d1O_TRIMESTRE\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 32,\n        \"samples\": [\n          \"202301\",\n          \"201903\",\n          \"202104\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No. ACCESOS FIJOS A INTERNET\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 241119,\n        \"min\": 1610511,\n        \"max\": 2638171,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          2298520,\n          1915409,\n          2171274\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"POBLACI\\u00d3N DANE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 236386,\n        \"min\": 7273265,\n        \"max\": 7907281,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7873316,\n          7300918,\n          7732161\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"INDICE(%)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.682051152960505,\n        \"min\": 22.14,\n        \"max\": 35.95,\n        \"num_unique_values\": 30,\n        \"samples\": [\n          29.07,\n          25.25,\n          28.46\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"\\u00cdNDICE Calculado\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.682965682243916,\n        \"min\": 22.142889060140117,\n        \"max\": 35.95488023153551,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          29.068399112160048,\n          25.226413039283823,\n          27.75381953525185\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Coincide\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 18
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# Explicación: Viabilidad de la Regresión Lineal para la Predicción de Accesos a Internet Fijo\n",
        "\n",
        "En este proyecto, queremos predecir los accesos a internet fijo en Bogotá para varios trimestres faltantes, incluyendo proyecciones para los años 2024 y 2025. A continuación se analiza si el uso de una regresión lineal es viable para esta predicción.\n",
        "\n",
        "## 1. Comportamiento Lineal de los Datos\n",
        "\n",
        "La regresión lineal es un modelo que asume una relación lineal entre las variables independientes (en este caso, año_trimestre) y la variable dependiente (número de accesos a internet fijo). Este tipo de modelo puede ser adecuado si el crecimiento de los accesos a internet muestra una tendencia constante a lo largo del tiempo, sin grandes variaciones o cambios acelerados.\n",
        "\n",
        "## 2. Dinámica de Crecimiento en el Tiempo\n",
        "\n",
        "Observando los datos recientes de accesos a internet fijo en Bogotá, es importante analizar si el crecimiento en estos últimos trimestres sigue un patrón lineal o si muestra aceleraciones o desaceleraciones. Si el crecimiento de los accesos ha sido constante, una regresión lineal podría capturar bien la tendencia. Sin embargo, en muchos casos relacionados con tecnología y acceso a servicios, el crecimiento puede no ser lineal, mostrando una tendencia exponencial o cambios bruscos en la expansión de infraestructura.\n",
        "\n",
        "## 3. Predictibilidad a Largo Plazo\n",
        "\n",
        "Para predecir varios trimestres en el futuro, hasta 2025, la regresión lineal podría ser viable para obtener una primera aproximación, pero no siempre es la más precisa en el largo plazo. Esto se debe a que la regresión lineal puede subestimar o sobreestimar el crecimiento si el ritmo cambia. En estos casos, los modelos de series de tiempo o incluso redes neuronales pueden capturar mejor patrones complejos y cambios en la tendencia.\n",
        "\n",
        "## Conclusión: Uso de la Regresión Lineal en el Proyecto\n",
        "\n",
        "Dado que tenemos datos de accesos hasta 2023, una regresión lineal inicial puede ser útil como primera aproximación. Sin embargo, es importante evaluar su precisión y considerar alternativas si los datos muestran variaciones importantes.\n",
        "\n",
        "## Próximos Pasos para Evaluar la Precisión de la Regresión Lineal\n",
        "\n",
        "Para determinar si la regresión lineal es suficiente para nuestras predicciones, realizaremos los siguientes pasos:\n",
        "\n",
        "1. **Implementar una Regresión Lineal Inicial**: Aplicaremos la regresión lineal en los datos históricos para obtener una predicción de los trimestres faltantes.\n",
        "2. **Calcular las Métricas de Precisión**: Usaremos métricas de precisión como el Error Cuadrático Medio (MSE), el Error Absoluto Medio (MAE) y el R² (coeficiente de determinación) para evaluar la exactitud del modelo lineal. Estas métricas nos permitirán cuantificar la diferencia entre las predicciones y los valores reales.\n",
        "3. **Comparar con Alternativas**: En caso de que el error de la regresión lineal sea significativo, podemos comparar este modelo con otros enfoques, como modelos de series temporales (ARIMA) o redes neuronales. Esto nos permitirá seleccionar el modelo que mejor se adapte a la dinámica de crecimiento en Bogotá.\n",
        "4. **Evaluar el Modelo a Corto y Largo Plazo**: Es posible que el modelo de regresión lineal sea suficientemente preciso para el corto plazo (2023-2024) pero no para predicciones más avanzadas. Evaluaremos la precisión en distintos períodos y ajustaremos el modelo si es necesario.\n",
        "\n",
        "A continuación, implementaremos estos pasos para verificar si la regresión lineal es adecuada para el proyecto.\n"
      ],
      "metadata": {
        "id": "vSmaf1ndtnbI"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Interpretación de los Resultados**\n",
        "\n",
        "- **Error Cuadrático Medio (MSE) y Error Absoluto Medio (MAE)**: Valores bajos de estas métricas indican que el modelo lineal se ajusta bien a los datos históricos.\n",
        "- **Coeficiente de Determinación (R²)**: Un valor de R² cercano a 1 indica que la regresión lineal explica bien la variabilidad en los accesos a internet.\n",
        "\n",
        "Si las métricas muestran que el error es aceptable, la regresión lineal puede ser suficiente para las predicciones. Si el error es alto, podríamos probar modelos de series de tiempo o redes neuronales para mejorar la precisión.\n"
      ],
      "metadata": {
        "id": "tBPcI6nQuSrh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# hacemos esto para enteneder que debemos trasformar para nuestra regresion Lineal\n",
        "bogota_data.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IG3PX3gAtqmP",
        "outputId": "bd42427e-b9b8-45f3-8467-da7e842e937e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "Index: 32 entries, 18771 to 2493\n",
            "Data columns (total 4 columns):\n",
            " #   Column                        Non-Null Count  Dtype  \n",
            "---  ------                        --------------  -----  \n",
            " 0   AÑO_TRIMESTRE                 32 non-null     object \n",
            " 1   No. ACCESOS FIJOS A INTERNET  32 non-null     int64  \n",
            " 2   POBLACIÓN DANE                32 non-null     int64  \n",
            " 3   INDICE(%)                     32 non-null     float64\n",
            "dtypes: float64(1), int64(2), object(1)\n",
            "memory usage: 1.2+ KB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "NP0aaog30Nf0"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# cargamos la libreria para el analisis\n",
        "\n",
        "from sklearn.linear_model import LinearRegression\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
        "import matplotlib.pyplot as plt\n"
      ],
      "metadata": {
        "id": "GfZX2jYHv9oZ"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Crear una copia del DataFrame original con un nombre específico\n",
        "linear_penetracion_internet = bogota_data.copy()\n",
        "\n",
        "# Crear la columna 'AÑO_TRIMESTRE_num' convirtiendo 'AÑO_TRIMESTRE' en una variable numérica\n",
        "\n",
        "linear_penetracion_internet['AÑO_TRIMESTRE_num'] = linear_penetracion_internet['AÑO_TRIMESTRE'].apply(lambda x: int(x[:4]) * 10 + int(x[4:]))\n",
        "# Regresión 1: Año-Trimestre vs. Número de Accesos\n",
        "X = linear_penetracion_internet[['AÑO_TRIMESTRE_num']]\n",
        "y = linear_penetracion_internet['No. ACCESOS FIJOS A INTERNET']\n",
        "\n",
        "model1 = LinearRegression()\n",
        "model1.fit(X, y)\n",
        "y_pred1 = model1.predict(X)\n",
        "\n",
        "# Calcular métricas de precisión para el primer modelo\n",
        "mse1 = mean_squared_error(y, y_pred1)\n",
        "mae1 = mean_absolute_error(y, y_pred1)\n",
        "r2_1 = r2_score(y, y_pred1)\n",
        "\n",
        "print(\"Métricas del primer modelo No. ACCESOS FIJOS A INTERNET:\")\n",
        "print(f\"MSE: {mse1:.2f}\")\n",
        "print(f\"MAE: {mae1:.2f}\")\n",
        "print(f\"R²: {r2_1:.2f}\")\n",
        "\n",
        "# Regresión 2: Año-Trimestre vs. Población DANE\n",
        "X2 = linear_penetracion_internet[['AÑO_TRIMESTRE_num']]\n",
        "y2 = linear_penetracion_internet['POBLACIÓN DANE']\n",
        "\n",
        "model2 = LinearRegression()\n",
        "model2.fit(X2, y2)\n",
        "y_pred2 = model2.predict(X2)\n",
        "\n",
        "\n",
        "# Calcular métricas de precisión para el segundo modelo\n",
        "mse2 = mean_squared_error(y2, y_pred2)\n",
        "mae2 = mean_absolute_error(y2, y_pred2)\n",
        "r2_2 = r2_score(y2, y_pred2)\n",
        "\n",
        "print(\"\\nMétricas del segundo modelo: POBLACIÓN DANE\")\n",
        "print(f\"MSE: {mse2:.2f}\")\n",
        "print(f\"MAE: {mae2:.2f}\")\n",
        "print(f\"R²: {r2_2:.2f}\")\n",
        "\n",
        "# Visualizaciones\n",
        "plt.figure(figsize=(12, 6))\n",
        "\n",
        "# Gráfico 1: Número de Accesos\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(X, y, label='Datos Reales', marker='o')\n",
        "plt.plot(X, y_pred1, label='Predicción', linestyle='--')\n",
        "plt.xlabel('Año-Trimestre')\n",
        "plt.ylabel('Número de Accesos Fijos a Internet')\n",
        "plt.title('Predicción de Accesos a Internet')\n",
        "plt.legend()\n",
        "\n",
        "# Gráfico 2: Población DANE\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(X2, y2, label='Datos Reales', marker='o')\n",
        "plt.plot(X2, y_pred2, label='Predicción', linestyle='--')\n",
        "plt.xlabel('Año-Trimestre')\n",
        "plt.ylabel('Población DANE')\n",
        "plt.title('Predicción de Población DANE')\n",
        "plt.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        },
        "id": "gOi8ZAFr1Qc7",
        "outputId": "d984b726-6aca-43af-a74f-742a656982dc"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Métricas del primer modelo No. ACCESOS FIJOS A INTERNET:\n",
            "MSE: 23663489691.76\n",
            "MAE: 68174.60\n",
            "R²: 0.58\n",
            "\n",
            "Métricas del segundo modelo: POBLACIÓN DANE\n",
            "MSE: 2167049119.34\n",
            "MAE: 40096.22\n",
            "R²: 0.96\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x600 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "#graficos de dispersion\n",
        "# Visualizaciones\n",
        "plt.figure(figsize=(16, 8))  # Aumentar el tamaño de la figura\n",
        "\n",
        "# Gráfico 1: Número de Accesos\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.scatter(X, y, label='Datos Reales', marker='o')\n",
        "plt.plot(X, y_pred1, label='Predicción', linestyle='--')\n",
        "plt.xlabel('Año-Trimestre')\n",
        "plt.ylabel('Número de Accesos Fijos a Internet')\n",
        "plt.title('Predicción de Accesos a Internet')\n",
        "plt.legend()\n",
        "\n",
        "# Gráfico 2: Población DANE\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.scatter(X2, y2, label='Datos Reales', marker='o')\n",
        "plt.plot(X2, y_pred2, label='Predicción', linestyle='--')\n",
        "plt.xlabel('Año-Trimestre')\n",
        "plt.ylabel('Población DANE')\n",
        "plt.title('Predicción de Población DANE')\n",
        "plt.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 330
        },
        "id": "khkJvZOKyKB1",
        "outputId": "d7525988-1d89-4fb9-e15c-ad90185f491a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Calcular los residuos para el primer modelo\n",
        "residuos1 = y - y_pred1\n",
        "\n",
        "# Gráfico de los residuos del primer modelo\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.scatter(X, residuos1, alpha=0.5)\n",
        "plt.axhline(y=0, color='r', linestyle='--')\n",
        "plt.xlabel('Año y Trimestre (AÑO_TRIMESTRE)')\n",
        "plt.ylabel('Residuos')\n",
        "plt.title('Gráfico de Residuos - No. ACCESOS FIJOS A INTERNET')\n",
        "plt.show()\n",
        "\n",
        "# Regresión 2: Año-Trimestre vs. Población DANE\n",
        "X2 = linear_penetracion_internet[['AÑO_TRIMESTRE_num']]\n",
        "y2 = linear_penetracion_internet['POBLACIÓN DANE']\n",
        "\n",
        "model2 = LinearRegression()\n",
        "model2.fit(X2, y2)\n",
        "y_pred2 = model2.predict(X2)\n",
        "\n",
        "# Calcular los residuos para el segundo modelo\n",
        "residuos2 = y2 - y_pred2\n",
        "\n",
        "# Gráfico de los residuos del segundo modelo\n",
        "plt.figure(figsize=(10, 6))\n",
        "plt.scatter(X2, residuos2, alpha=0.5)\n",
        "plt.axhline(y=0, color='r', linestyle='--')\n",
        "plt.xlabel('Año y Trimestre (AÑO_TRIMESTRE)')\n",
        "plt.ylabel('Residuos')\n",
        "plt.title('Gráfico de Residuos - POBLACIÓN DANE')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 805
        },
        "id": "A0G4PVdWA7FY",
        "outputId": "c8d1fe0c-78fb-4c9a-8f20-48c9a8aff8dd"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x600 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Interpretación Detallada y Visualización de Resultados\n",
        "### **Modelo 1: Número de Accesos Fijos a Internet**\n",
        "- **MSE: 24,587,739,726.14:** Este valor indica que, en promedio, los errores al cuadrado entre los valores predichos y los reales son extremadamente grandes. Esto sugiere que el modelo subestima o sobreestima significativamente el número de accesos en muchos casos.\n",
        "- **MAE: 70,659.83:** Este valor nos dice que, en promedio, las predicciones del modelo se desvían en aproximadamente 70,660 accesos del valor real. Esto significa que nuestras estimaciones pueden estar muy lejos de la realidad.\n",
        "- **R²: 0.56:** Aunque el modelo explica el 56% de la variabilidad en el número de accesos, este valor no es muy alto. Significa que hay un 44% de la variabilidad que no está siendo explicada por el modelo, lo que indica que hay otros factores importantes que no hemos considerado.\n",
        "\n",
        "**Conclusión:** El modelo de regresión lineal simple para el número de accesos a internet no es satisfactorio. Las predicciones tienen una gran incertidumbre y no capturan adecuadamente la complejidad del fenómeno.\n",
        "### **Modelo 2: Población DANE**\n",
        "- **MSE: 2,590,517,126.97:** Este valor es menor que el del primer modelo, pero aún así es considerable.\n",
        "- **MAE: 43,130.02:** El MAE también es menor que en el primer modelo, lo que indica que las predicciones son más precisas.\n",
        "- **R²: 0.95:** Este valor es muy alto, lo que significa que el modelo explica el 95% de la variabilidad en la población. Esto sugiere que el modelo se ajusta muy bien a los datos.\n",
        "\n",
        "**Conclusión:** El modelo de regresión lineal simple para la población DANE es mucho más preciso que el del número de accesos. El año-trimestre parece ser un buen predictor de la población, lo cual es esperable dado el crecimiento poblacional generalmente constante.\n",
        "## **Visualización de Resultados**\n",
        "Para una mejor comprensión, podemos representar gráficamente los resultados. Una opción es crear un gráfico de dispersión donde el eje x represente los valores reales y el eje y los valores predichos. Si los puntos se encuentran cerca de la línea diagonal y = x, significa que las predicciones son precisas.\n",
        "\n",
        "\n",
        "\n",
        "**En el gráfico, esperaríamos ver:**\n",
        "\n",
        "- **Modelo 1:** Los puntos estarían dispersos alrededor de la línea diagonal, con una dispersión considerable, lo que indicaría una baja precisión.\n",
        "- **Modelo 2:** Los puntos estarían más concentrados alrededor de la línea diagonal, lo que indicaría una mayor precisión.\n",
        "### **Próximos Pasos**\n",
        "Dado que el modelo para el número de accesos a internet no es satisfactorio, se recomienda:\n",
        "\n",
        "\n",
        "- **Modelos más complejos:** Explorar modelos de series de tiempo (ARIMA, SARIMA), modelos no lineales (redes neuronales) o modelos de mezcla.\n",
        "- **Validación cruzada:** Evaluar el rendimiento del modelo en diferentes subconjuntos de datos.\n",
        "- **Análisis de causalidad:** Determinar si existe una relación causal entre las variables.\n",
        "\n",
        "**Para el modelo de la población DANE,** aunque los resultados son buenos, siempre es posible mejorar. Se podría explorar la inclusión de otras variables demográficas para ver si se puede obtener un ajuste aún mejor.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "`Nota: guardaremos los datos para poder comparar con futuros modelos y p´redicciones`"
      ],
      "metadata": {
        "id": "thmcpgIVx2GS"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Crear un DataFrame con los datos originales y las predicciones del primer modelo\n",
        "resultados1 = linear_penetracion_internet[['AÑO_TRIMESTRE', 'AÑO_TRIMESTRE_num', 'No. ACCESOS FIJOS A INTERNET']].copy()\n",
        "resultados1['Predicción No. ACCESOS FIJOS A INTERNET'] = y_pred1\n",
        "resultados1['Residuos No. ACCESOS FIJOS A INTERNET'] = residuos1\n",
        "resultados1['Modelo'] = 'Regresión Lineal'\n",
        "\n",
        "# Crear un DataFrame con los datos originales y las predicciones del segundo modelo\n",
        "resultados2 = linear_penetracion_internet[['AÑO_TRIMESTRE', 'AÑO_TRIMESTRE_num', 'POBLACIÓN DANE']].copy()\n",
        "resultados2['Predicción POBLACIÓN DANE'] = y_pred2\n",
        "resultados2['Residuos POBLACIÓN DANE'] = residuos2\n",
        "resultados2['Modelo'] = 'Regresión Lineal'\n",
        "\n",
        "# Guardar los resultados en archivos CSV\n",
        "resultados1.to_csv('resultados_modelo_accesos_internet.csv', index=False)\n",
        "resultados2.to_csv('resultados_modelo_poblacion_dane.csv', index=False)\n",
        "\n",
        "print(\"Los datos han sido guardados en 'resultados_modelo_accesos_internet.csv' y 'resultados_modelo_poblacion_dane.csv'.\")\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "LdO4_IACzHnE",
        "outputId": "0b62842b-d680-484f-8470-b9c00ff31fa9"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Los datos han sido guardados en 'resultados_modelo_accesos_internet.csv' y 'resultados_modelo_poblacion_dane.csv'.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "H1P0oId9GShv"
      }
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "x2QMTEQiKOUw"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### **Explicación del Uso de ARIMA**\n",
        "El modelo ARIMA (AutoRegressive Integrated Moving Average) es una técnica de series temporales que se utiliza para predecir valores futuros basándose en datos históricos. Es especialmente útil cuando los datos muestran patrones temporales, como tendencias o estacionalidades, que no pueden ser capturados adecuadamente por modelos más simples como la regresión lineal.\n",
        "### **¿Por Qué Usar ARIMA?**\n",
        "1. **Captura de Patrones Temporales**: A diferencia de la regresión lineal, que asume una relación lineal entre las variables, ARIMA puede capturar patrones más complejos en los datos, como tendencias no lineales y estacionalidades.\n",
        "1. **Mejor Precisión en Predicciones**: ARIMA puede proporcionar predicciones más precisas cuando los datos históricos muestran variaciones que no son lineales. Esto es crucial para datos relacionados con tecnología y acceso a servicios, donde el crecimiento puede no ser constante.\n",
        "1. **Evaluación Comparativa**: Al comparar los resultados de ARIMA con los de la regresión lineal, podemos determinar cuál modelo se ajusta mejor a los datos y proporciona predicciones más precisas.\n",
        "### **Pasos a Seguir**\n",
        "1. **Implementación del Modelo ARIMA**: Aplicaremos el modelo ARIMA a los datos históricos de accesos fijos a internet en Bogotá.\n",
        "1. **Predicción con ARIMA**: Utilizaremos el modelo entrenado para predecir los valores futuros de accesos fijos a internet.\n",
        "1. **Cálculo de Métricas de Precisión**: Calcularemos las mismas métricas de precisión (MSE, MAE y R²) para evaluar el rendimiento del modelo ARIMA.\n",
        "1. **Comparación de Resultados**: Compararemos las métricas obtenidas con ARIMA con las de la regresión lineal para determinar cuál modelo es más adecuado para nuestras predicciones.\n",
        "1. **Visualización de Resultados**: Graficaremos los valores reales y predichos para visualizar el rendimiento del modelo ARIMA.\n",
        "### **Determinación**\n",
        "Al final de este proceso, podremos determinar si el modelo ARIMA proporciona predicciones más precisas y confiables que la regresión lineal. Esto nos permitirá seleccionar el modelo más adecuado para predecir los accesos fijos a internet en Bogotá y mejorar la precisión de nuestras proyecciones futuras.\n",
        "\n",
        "### **Interpretación de los Resultados ARIMA**\n",
        "1. **Error Cuadrático Medio (MSE)**:\n",
        "   1. Un MSE bajo indica que el modelo ARIMA se ajusta bien a los datos históricos. Compararemos este valor con el MSE de la regresión lineal para evaluar cuál modelo es más preciso.\n",
        "1. **Error Absoluto Medio (MAE)**:\n",
        "   1. Un MAE bajo significa que, en promedio, las predicciones del modelo ARIMA están más cerca de los valores reales. Este valor también se comparará con el MAE de la regresión lineal.\n",
        "1. **Coeficiente de Determinación (R²)**:\n",
        "   1. Un R² cercano a 1 indica que el modelo ARIMA explica bien la variabilidad en los accesos a internet. Compararemos este valor con el R² de la regresión lineal para determinar cuál modelo tiene mejor capacidad explicativa.\n",
        "### **Conclusión:**\n",
        "- **Comparación de Modelos**: Al comparar las métricas de precisión de ambos modelos (regresión lineal y ARIMA), podremos determinar cuál modelo proporciona predicciones más precisas y cuál es más adecuado para predecir los accesos fijos a internet en Bogotá.\n",
        "\n",
        "### **Fórmula para ARIMA**\n",
        "El modelo ARIMA se define por tres parámetros: ( p ), ( d ), y ( q ):\n",
        "\n",
        "- ( p ): Número de términos autorregresivos (AR).\n",
        "- ( d ): Número de diferencias no estacionales necesarias para hacer la serie temporal estacionaria.\n",
        "- ( q ): Número de términos de media móvil (MA).\n",
        "\n",
        "La fórmula general para un modelo ARIMA(( p, d, q )) es:\n",
        "\n",
        "Yt​=c+ϕ1​Yt−1​+ϕ2​Yt−2​+…+ϕp​Yt−p​+θ1​ϵt−1​+θ2​ϵt−2​+…+θq​ϵt−q​+ϵt​\n",
        "\n",
        "Donde:\n",
        "\n",
        "- ( Y\\_t ) es el valor de la serie en el tiempo ( t ).\n",
        "- ( c ) es una constante.\n",
        "- ( \\phi ) son los coeficientes de los términos autorregresivos.\n",
        "- ( \\theta ) son los coeficientes de los términos de media móvil.\n",
        "- ( \\epsilon\\_t ) es el error en el tiempo ( t ).\n",
        "\n"
      ],
      "metadata": {
        "id": "LJWZTxX2yrFy"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#instalamos la libreria\n",
        "!pip install statsmodels\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "T7v-1uN01hJj",
        "outputId": "2c968d9f-805b-4907-a88f-2f64f263be4e"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Requirement already satisfied: statsmodels in /usr/local/lib/python3.10/dist-packages (0.14.4)\n",
            "Requirement already satisfied: numpy<3,>=1.22.3 in /usr/local/lib/python3.10/dist-packages (from statsmodels) (1.26.4)\n",
            "Requirement already satisfied: scipy!=1.9.2,>=1.8 in /usr/local/lib/python3.10/dist-packages (from statsmodels) (1.13.1)\n",
            "Requirement already satisfied: pandas!=2.1.0,>=1.4 in /usr/local/lib/python3.10/dist-packages (from statsmodels) (2.2.2)\n",
            "Requirement already satisfied: patsy>=0.5.6 in /usr/local/lib/python3.10/dist-packages (from statsmodels) (0.5.6)\n",
            "Requirement already satisfied: packaging>=21.3 in /usr/local/lib/python3.10/dist-packages (from statsmodels) (24.2)\n",
            "Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.10/dist-packages (from pandas!=2.1.0,>=1.4->statsmodels) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas!=2.1.0,>=1.4->statsmodels) (2024.2)\n",
            "Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.10/dist-packages (from pandas!=2.1.0,>=1.4->statsmodels) (2024.2)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from patsy>=0.5.6->statsmodels) (1.16.0)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# importamos las librerias y limpiamos variables usadas anteriormente\n",
        "from statsmodels.tsa.arima.model import ARIMA\n",
        "from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n",
        "import matplotlib.pyplot as plt"
      ],
      "metadata": {
        "id": "KLUzrlr31s1S"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Crear una copia del DataFrame original con un nombre específico\n",
        "arima_data = bogota_data.copy()\n",
        "# Crear la columna 'AÑO_TRIMESTRE_num' convirtiendo 'AÑO_TRIMESTRE' en una variable numérica\n",
        "arima_data['AÑO_TRIMESTRE_num'] = arima_data['AÑO_TRIMESTRE'].str[:4].astype(int) + (arima_data['AÑO_TRIMESTRE'].str[4:].astype(int) - 1) / 4\n",
        "# ARIMA para Número de Accesos\n",
        "y = arima_data['No. ACCESOS FIJOS A INTERNET']\n",
        "\n",
        "# Ajustar el modelo ARIMA (p, d, q) = (1, 1, 1) como ejemplo\n",
        "model_arima1 = ARIMA(y, order=(1, 1, 1))\n",
        "model_arima1_fit = model_arima1.fit()\n",
        "y_pred_arima1 = model_arima1_fit.predict(start=1, end=len(y), typ='levels')\n",
        "\n",
        "# Calcular métricas de precisión para el modelo ARIMA\n",
        "mse_arima1 = mean_squared_error(y[1:], y_pred_arima1[1:])\n",
        "mae_arima1 = mean_absolute_error(y[1:], y_pred_arima1[1:])\n",
        "r2_arima1 = r2_score(y[1:], y_pred_arima1[1:])\n",
        "\n",
        "print(\"Métricas del modelo ARIMA No. ACCESOS FIJOS A INTERNET:\")\n",
        "print(f\"MSE: {mse_arima1:.2f}\")\n",
        "print(f\"MAE: {mae_arima1:.2f}\")\n",
        "print(f\"R²: {r2_arima1:.2f}\")\n",
        "\n",
        "# ARIMA para Población DANE\n",
        "y2 = arima_data['POBLACIÓN DANE']\n",
        "\n",
        "# Ajustar el modelo ARIMA (p, d, q) = (1, 1, 1) como ejemplo\n",
        "model_arima2 = ARIMA(y2, order=(1, 1, 1))\n",
        "model_arima2_fit = model_arima2.fit()\n",
        "y_pred_arima2 = model_arima2_fit.predict(start=1, end=len(y2), typ='levels')\n",
        "\n",
        "# Calcular métricas de precisión para el modelo ARIMA\n",
        "mse_arima2 = mean_squared_error(y2[1:], y_pred_arima2[1:])\n",
        "mae_arima2 = mean_absolute_error(y2[1:], y_pred_arima2[1:])\n",
        "r2_arima2 = r2_score(y2[1:], y_pred_arima2[1:])\n",
        "\n",
        "print(\"\\nMétricas del modelo ARIMA POBLACIÓN DANE:\")\n",
        "print(f\"MSE: {mse_arima2:.2f}\")\n",
        "print(f\"MAE: {mae_arima2:.2f}\")\n",
        "print(f\"R²: {r2_arima2:.2f}\")\n",
        "\n",
        "# Visualizaciones\n",
        "plt.figure(figsize=(16, 8))\n",
        "\n",
        "# Gráfico 1: Número de Accesos\n",
        "plt.subplot(1, 2, 1)\n",
        "plt.plot(arima_data['AÑO_TRIMESTRE_num'], y, label='Datos Reales', marker='o')\n",
        "plt.plot(arima_data['AÑO_TRIMESTRE_num'][1:], y_pred_arima1[1:], label='Predicción ARIMA', linestyle='--')\n",
        "plt.xlabel('Año-Trimestre')\n",
        "plt.ylabel('Número de Accesos Fijos a Internet')\n",
        "plt.title('Predicción de Accesos a Internet con ARIMA')\n",
        "plt.legend()\n",
        "\n",
        "# Gráfico 2: Población DANE\n",
        "plt.subplot(1, 2, 2)\n",
        "plt.plot(arima_data['AÑO_TRIMESTRE_num'], y2, label='Datos Reales', marker='o')\n",
        "plt.plot(arima_data['AÑO_TRIMESTRE_num'][1:], y_pred_arima2[1:], label='Predicción ARIMA', linestyle='--')\n",
        "plt.xlabel('Año-Trimestre')\n",
        "plt.ylabel('Población DANE')\n",
        "plt.title('Predicción de Población DANE con ARIMA')\n",
        "plt.legend()\n",
        "\n",
        "plt.tight_layout()\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 922
        },
        "id": "tXS8sGL-2AJ7",
        "outputId": "9bdebf22-b939-4dc0-c698-ec3b18758fb7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: An unsupported index was provided. As a result, forecasts cannot be generated. To use the model for forecasting, use one of the supported classes of index.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: An unsupported index was provided. As a result, forecasts cannot be generated. To use the model for forecasting, use one of the supported classes of index.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: An unsupported index was provided. As a result, forecasts cannot be generated. To use the model for forecasting, use one of the supported classes of index.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n",
            "  return get_prediction_index(\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n",
            "  return get_prediction_index(\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/representation.py:374: FutureWarning: Unknown keyword arguments: dict_keys(['typ']).Passing unknown keyword arguments will raise a TypeError beginning in version 0.15.\n",
            "  warnings.warn(msg, FutureWarning)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: An unsupported index was provided. As a result, forecasts cannot be generated. To use the model for forecasting, use one of the supported classes of index.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: An unsupported index was provided. As a result, forecasts cannot be generated. To use the model for forecasting, use one of the supported classes of index.\n",
            "  self._init_dates(dates, freq)\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:473: ValueWarning: An unsupported index was provided. As a result, forecasts cannot be generated. To use the model for forecasting, use one of the supported classes of index.\n",
            "  self._init_dates(dates, freq)\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Métricas del modelo ARIMA No. ACCESOS FIJOS A INTERNET:\n",
            "MSE: 1606704512.09\n",
            "MAE: 15928.32\n",
            "R²: 0.97\n",
            "\n",
            "Métricas del modelo ARIMA POBLACIÓN DANE:\n",
            "MSE: 33066.90\n",
            "MAE: 76.14\n",
            "R²: 1.00\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: ValueWarning: No supported index is available. Prediction results will be given with an integer index beginning at `start`.\n",
            "  return get_prediction_index(\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/base/tsa_model.py:837: FutureWarning: No supported index is available. In the next version, calling this method in a model without a supported index will result in an exception.\n",
            "  return get_prediction_index(\n",
            "/usr/local/lib/python3.10/dist-packages/statsmodels/tsa/statespace/representation.py:374: FutureWarning: Unknown keyword arguments: dict_keys(['typ']).Passing unknown keyword arguments will raise a TypeError beginning in version 0.15.\n",
            "  warnings.warn(msg, FutureWarning)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1600x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Interpretaciones\n",
        "1. **Modelo ARIMA para No. ACCESOS FIJOS A INTERNET**:\n",
        "   1. MSE (Error Cuadrático Medio): 1606704512.09\n",
        "      1. Este valor indica la magnitud del error cuadrático medio entre las predicciones y los valores reales. Un valor más bajo es mejor, pero en este caso, el valor es bastante alto, lo que sugiere que hay una variabilidad significativa en los errores.\n",
        "   1. MAE (Error Absoluto Medio): 15928.32\n",
        "      1. Este valor mide el error promedio absoluto entre las predicciones y los valores reales. Un MAE de 15928.32 indica que, en promedio, las predicciones del modelo ARIMA están desviadas por aproximadamente 15928 accesos.\n",
        "   1. R² (Coeficiente de Determinación): 0.97\n",
        "      1. Este valor indica que el modelo ARIMA explica el 97% de la variabilidad en el número de accesos fijos a internet. Un R² cercano a 1 es muy bueno, lo que sugiere que el modelo ajusta bien los datos.\n",
        "1. **Modelo ARIMA para POBLACIÓN DANE**:\n",
        "   1. MSE (Error Cuadrático Medio): 33066.90\n",
        "      1. Este valor es mucho más bajo en comparación con el modelo de accesos a internet, lo que indica que las predicciones son más precisas.\n",
        "   1. MAE (Error Absoluto Medio): 76.14\n",
        "      1. Un MAE de 76.14 sugiere que, en promedio, las predicciones del modelo ARIMA están desviadas por aproximadamente 76 personas.\n",
        "   1. R² (Coeficiente de Determinación): 1.00\n",
        "      1. Un R² de 1.00 indica que el modelo ARIMA explica prácticamente toda la variabilidad en la población DANE, lo que sugiere un ajuste perfecto.\n",
        "         ### Conclusiones\n",
        "1. **Precisión del Modelo**:\n",
        "   1. Ambos modelos ARIMA muestran un alto coeficiente de determinación (R²), lo que indica que son capaces de explicar la mayor parte de la variabilidad en los datos. Sin embargo, el modelo para la población DANE es particularmente preciso, con un R² de 1.00.\n",
        "1. **Comparación con la Regresión Lineal**:\n",
        "   1. Para determinar si el modelo ARIMA es mejor que la regresión lineal, deberíamos comparar las métricas de ambos modelos. Si los modelos ARIMA tienen menores valores de MSE y MAE y un R² más alto, entonces podríamos concluir que los modelos ARIMA son superiores.\n",
        "1. **Aplicabilidad**:\n",
        "   1. Dado que el modelo ARIMA para la población DANE tiene un ajuste casi perfecto, podría ser más confiable para predicciones futuras en comparación con el modelo de accesos a internet, que muestra una mayor variabilidad en los errores.\n",
        "\n",
        "      En resumen, los modelos ARIMA parecen ser bastante efectivos, especialmente para la población DANE. Sin embargo, es importante comparar estas métricas con las de los modelos de regresión lineal para tomar una decisión informada sobre cuál modelo es más adecuado para tus datos.\n",
        "\n"
      ],
      "metadata": {
        "id": "llxiX1wo20vP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Guardar los resultados del modelo ARIMA para No. ACCESOS FIJOS A INTERNET\n",
        "resultados_arima_accesos = pd.DataFrame({\n",
        "    'AÑO_TRIMESTRE': arima_data['AÑO_TRIMESTRE'][1:],  # Use the sliced DataFrame for consistency\n",
        "    'Valores_Reales': y[1:],\n",
        "    'Valores_Predichos': y_pred_arima1[1:],\n",
        "    'MSE': [mse_arima1] * len(y[1:]),\n",
        "    'MAE': [mae_arima1] * len(y[1:]),\n",
        "    'R2': [r2_arima1] * len(y[1:])\n",
        "})\n",
        "\n",
        "resultados_arima_accesos.to_csv('resultados_arima_accesos_internet.csv', index=False)\n",
        "\n",
        "# Guardar los resultados del modelo ARIMA para POBLACIÓN DANE\n",
        "resultados_arima_poblacion = pd.DataFrame({\n",
        "    'AÑO_TRIMESTRE': arima_data['AÑO_TRIMESTRE'][1:],  # Use the sliced DataFrame for consistency\n",
        "    'Valores_Reales': y2[1:],\n",
        "    'Valores_Predichos': y_pred_arima2[1:],\n",
        "    'MSE': [mse_arima2] * len(y2[1:]),\n",
        "    'MAE': [mae_arima2] * len(y2[1:]),\n",
        "    'R2': [r2_arima2] * len(y2[1:])\n",
        "})\n",
        "\n",
        "resultados_arima_poblacion.to_csv('resultados_arima_poblacion_dane.csv', index=False)\n",
        "\n",
        "print(\"Resultados guardados en 'resultados_arima_accesos_internet.csv' y 'resultados_arima_poblacion_dane.csv'\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 408
        },
        "id": "kgq8PTTx27F-",
        "outputId": "8fdfb5f6-8b1a-4bb2-d4f4-61eab174426d"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ValueError",
          "evalue": "array length 31 does not match index length 62",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-51-4a37605285ca>\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Guardar los resultados del modelo ARIMA para No. ACCESOS FIJOS A INTERNET\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m resultados_arima_accesos = pd.DataFrame({\n\u001b[0m\u001b[1;32m      3\u001b[0m     \u001b[0;34m'AÑO_TRIMESTRE'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0marima_data\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'AÑO_TRIMESTRE'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m  \u001b[0;31m# Use the sliced DataFrame for consistency\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m     \u001b[0;34m'Valores_Reales'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m     \u001b[0;34m'Valores_Predichos'\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0my_pred_arima1\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, data, index, columns, dtype, copy)\u001b[0m\n\u001b[1;32m    776\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    777\u001b[0m             \u001b[0;31m# GH#38939 de facto copy defaults to False only in non-dict cases\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 778\u001b[0;31m             \u001b[0mmgr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict_to_mgr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcopy\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtyp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mmanager\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    779\u001b[0m         \u001b[0;32melif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mma\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mMaskedArray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    780\u001b[0m             \u001b[0;32mfrom\u001b[0m \u001b[0mnumpy\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mma\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mmrecords\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36mdict_to_mgr\u001b[0;34m(data, index, columns, dtype, typ, copy)\u001b[0m\n\u001b[1;32m    501\u001b[0m             \u001b[0marrays\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"dtype\"\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mx\u001b[0m \u001b[0;32min\u001b[0m \u001b[0marrays\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    502\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 503\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0marrays_to_mgr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolumns\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindex\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdtype\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdtype\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtyp\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mtyp\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mconsolidate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    504\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    505\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36marrays_to_mgr\u001b[0;34m(arrays, columns, index, dtype, verify_integrity, typ, consolidate)\u001b[0m\n\u001b[1;32m    112\u001b[0m         \u001b[0;31m# figure out the index, if necessary\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    113\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mindex\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 114\u001b[0;31m             \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_extract_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0marrays\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    115\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    116\u001b[0m             \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mensure_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindex\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/internals/construction.py\u001b[0m in \u001b[0;36m_extract_index\u001b[0;34m(data)\u001b[0m\n\u001b[1;32m    688\u001b[0m                     \u001b[0;34mf\"length {len(index)}\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    689\u001b[0m                 )\n\u001b[0;32m--> 690\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmsg\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    691\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    692\u001b[0m             \u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdefault_index\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlengths\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mValueError\u001b[0m: array length 31 does not match index length 62"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Crear copias del DataFrame original\n",
        "bogota_data_copy = bogota_data.copy()\n",
        "\n",
        "# Crear la columna 'AÑO_TRIMESTRE_num' convirtiendo 'AÑO_TRIMESTRE' en una variable numérica\n",
        "bogota_data_copy['AÑO_TRIMESTRE_num'] = bogota_data_copy['AÑO_TRIMESTRE'].str[:4].astype(int) + (bogota_data_copy['AÑO_TRIMESTRE'].str[4:].astype(int) - 1) / 4\n",
        "\n",
        "# Definir las variables X e y para la regresión de población\n",
        "X_pop = bogota_data_copy[['AÑO_TRIMESTRE_num', 'POBLACIÓN DANE']]\n",
        "y_pop = bogota_data_copy['No. ACCESOS FIJOS A INTERNET']\n",
        "\n",
        "# Crear el modelo de regresión lineal para población\n",
        "model_pop = LinearRegression()\n",
        "model_pop.fit(X_pop, y_pop)\n",
        "\n",
        "# Hacer predicciones para población\n",
        "y_pred_pop = model_pop.predict(X_pop)\n",
        "\n",
        "# Definir las variables X e y para la regresión de penetración de internet\n",
        "X_pen = bogota_data_copy[['AÑO_TRIMESTRE_num', 'INDICE(%)']]\n",
        "y_pen = bogota_data_copy['No. ACCESOS FIJOS A INTERNET']\n",
        "\n",
        "# Crear el modelo de regresión lineal para penetración de internet\n",
        "model_pen = LinearRegression()\n",
        "model_pen.fit(X_pen, y_pen)\n",
        "\n",
        "# Hacer predicciones para penetración de internet\n",
        "y_pred_pen = model_pen.predict(X_pen)\n",
        "\n",
        "# Graficar las predicciones de ambas regresiones\n",
        "plt.figure(figsize=(12, 8))\n",
        "plt.plot(bogota_data_copy['AÑO_TRIMESTRE_num'], y_pop, label='Datos Reales', marker='o')\n",
        "plt.plot(bogota_data_copy['AÑO_TRIMESTRE_num'], y_pred_pop, label='Predicción Población', linestyle='--')\n",
        "plt.plot(bogota_data_copy['AÑO_TRIMESTRE_num'], y_pred_pen, label='Predicción Penetración de Internet', linestyle='--')\n",
        "plt.xlabel('Año y Trimestre (AÑO_TRIMESTRE)')\n",
        "plt.ylabel('No. de Accesos Fijos a Internet')\n",
        "plt.title('Predicción de Accesos a Internet en Bogotá')\n",
        "plt.legend()\n",
        "plt.show()\n",
        "\n",
        "# Crear DataFrame para la regresión de población\n",
        "resultados_pop = pd.DataFrame({\n",
        "    'AÑO_TRIMESTRE': bogota_data_copy['AÑO_TRIMESTRE'],\n",
        "    'No. ACCESOS FIJOS A INTERNET': y_pop,\n",
        "    'POBLACIÓN DANE': bogota_data_copy['POBLACIÓN DANE'],\n",
        "    'ÍNDICE Calculado': y_pred_pop\n",
        "})\n",
        "\n",
        "# Crear DataFrame para la regresión de penetración de internet\n",
        "resultados_pen = pd.DataFrame({\n",
        "    'AÑO_TRIMESTRE': bogota_data_copy['AÑO_TRIMESTRE'],\n",
        "    'No. ACCESOS FIJOS A INTERNET': y_pen,\n",
        "    'INDICE(%)': bogota_data_copy['INDICE(%)'],\n",
        "    'ÍNDICE Calculado': y_pred_pen\n",
        "})"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 460
        },
        "id": "5lGJkxLs4ahr",
        "outputId": "b4acc1e8-725e-4798-aaab-9dc8b4c068d1"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1200x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "bogota_data"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "kzZKQ3xu5gjo",
        "outputId": "52d98269-801a-475a-deb7-8c30d3d1db22"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      AÑO_TRIMESTRE DEPARTAMENTO     MUNICIPIO  No. ACCESOS FIJOS A INTERNET  \\\n",
              "18771        201504  BOGOTÁ D.C.  BOGOTÁ, D.C.                       1610511   \n",
              "30907        201601  BOGOTÁ D.C.  BOGOTÁ, D.C.                       1647186   \n",
              "18047        201602  BOGOTÁ D.C.  BOGOTÁ, D.C.                       1681117   \n",
              "24086        201603  BOGOTÁ D.C.  BOGOTÁ, D.C.                       1719075   \n",
              "19515        201604  BOGOTÁ D.C.  BOGOTÁ, D.C.                       1728459   \n",
              "19722        201701  BOGOTÁ D.C.  BOGOTÁ, D.C.                       2638171   \n",
              "31959        201702  BOGOTÁ D.C.  BOGOTÁ, D.C.                       1776768   \n",
              "32574        201703  BOGOTÁ D.C.  BOGOTÁ, D.C.                       1807827   \n",
              "17650        201704  BOGOTÁ D.C.  BOGOTÁ, D.C.                       1818094   \n",
              "30078        201801  BOGOTÁ D.C.  BOGOTÁ, D.C.                       1826350   \n",
              "18810        201802  BOGOTÁ D.C.  BOGOTÁ, D.C.                       1857309   \n",
              "31062        201803  BOGOTÁ D.C.  BOGOTÁ, D.C.                       1875396   \n",
              "27540        201804  BOGOTÁ D.C.  BOGOTÁ, D.C.                       1876271   \n",
              "19157        201901  BOGOTÁ D.C.  BOGOTÁ, D.C.                       1874506   \n",
              "15798        201902  BOGOTÁ D.C.  BOGOTÁ, D.C.                       1890765   \n",
              "28073        201903  BOGOTÁ D.C.  BOGOTÁ, D.C.                       1915409   \n",
              "32490        201904  BOGOTÁ D.C.  BOGOTÁ, D.C.                       1916910   \n",
              "33078        202001  BOGOTÁ D.C.  BOGOTÁ, D.C.                       1957333   \n",
              "13832        202002  BOGOTÁ D.C.  BOGOTÁ, D.C.                       2025140   \n",
              "32350        202003  BOGOTÁ D.C.  BOGOTÁ, D.C.                       2069115   \n",
              "15648        202004  BOGOTÁ D.C.  BOGOTÁ, D.C.                       2088680   \n",
              "8018         202101  BOGOTÁ D.C.  BOGOTÁ, D.C.                       2139304   \n",
              "10290        202102  BOGOTÁ D.C.  BOGOTÁ, D.C.                       2165658   \n",
              "6569         202103  BOGOTÁ D.C.  BOGOTÁ, D.C.                       2157112   \n",
              "906          202104  BOGOTÁ D.C.  BOGOTÁ, D.C.                       2171274   \n",
              "11998        202201  BOGOTÁ D.C.  BOGOTÁ, D.C.                       2240695   \n",
              "6908         202202  BOGOTÁ D.C.  BOGOTÁ, D.C.                       2248809   \n",
              "917          202203  BOGOTÁ D.C.  BOGOTÁ, D.C.                       2261755   \n",
              "628          202204  BOGOTÁ D.C.  BOGOTÁ, D.C.                       2269823   \n",
              "12251        202301  BOGOTÁ D.C.  BOGOTÁ, D.C.                       2298520   \n",
              "10346        202302  BOGOTÁ D.C.  BOGOTÁ, D.C.                       2303696   \n",
              "2493         202303  BOGOTÁ D.C.  BOGOTÁ, D.C.                       2251960   \n",
              "\n",
              "       POBLACIÓN DANE  INDICE(%)  AÑO_TRIMESTRE_num  \n",
              "18771         7273265      22.14            2016.00  \n",
              "30907         7300918      22.56            2016.25  \n",
              "18047         7300918      23.03            2016.50  \n",
              "24086         7300918      23.55            2016.75  \n",
              "19515         7300918      23.67            2017.00  \n",
              "19722         7337449      35.95            2017.25  \n",
              "31959         7337449      24.22            2017.50  \n",
              "32574         7337449      24.64            2017.75  \n",
              "17650         7337449      24.78            2018.00  \n",
              "30078         7412566      24.64            2018.25  \n",
              "18810         7412566      25.06            2018.50  \n",
              "31062         7412566      25.30            2018.75  \n",
              "27540         7412566      25.31            2019.00  \n",
              "19157         7592871      24.69            2019.25  \n",
              "15798         7592871      24.90            2019.50  \n",
              "28073         7592871      25.23            2019.75  \n",
              "32490         7592871      25.25            2020.00  \n",
              "33078         7732161      25.31            2020.25  \n",
              "13832         7732161      26.19            2020.50  \n",
              "32350         7732161      26.76            2020.75  \n",
              "15648         7732161      27.01            2021.00  \n",
              "8018          7823334      27.35            2021.25  \n",
              "10290         7823334      27.68            2021.50  \n",
              "6569          7823334      27.57            2021.75  \n",
              "906           7823334      27.75            2022.00  \n",
              "11998         7873316      28.46            2022.25  \n",
              "6908          7873316      28.56            2022.50  \n",
              "917           7873316      28.73            2022.75  \n",
              "628           7873316      28.83            2023.00  \n",
              "12251         7907281      29.07            2023.25  \n",
              "10346         7907281      29.13            2023.50  \n",
              "2493          7907281      28.48            2023.75  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ff6f2f7f-bb39-409b-a935-7926af613e78\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>AÑO_TRIMESTRE</th>\n",
              "      <th>DEPARTAMENTO</th>\n",
              "      <th>MUNICIPIO</th>\n",
              "      <th>No. ACCESOS FIJOS A INTERNET</th>\n",
              "      <th>POBLACIÓN DANE</th>\n",
              "      <th>INDICE(%)</th>\n",
              "      <th>AÑO_TRIMESTRE_num</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>18771</th>\n",
              "      <td>201504</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1610511</td>\n",
              "      <td>7273265</td>\n",
              "      <td>22.14</td>\n",
              "      <td>2016.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30907</th>\n",
              "      <td>201601</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1647186</td>\n",
              "      <td>7300918</td>\n",
              "      <td>22.56</td>\n",
              "      <td>2016.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18047</th>\n",
              "      <td>201602</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1681117</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23.03</td>\n",
              "      <td>2016.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>24086</th>\n",
              "      <td>201603</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1719075</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23.55</td>\n",
              "      <td>2016.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19515</th>\n",
              "      <td>201604</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1728459</td>\n",
              "      <td>7300918</td>\n",
              "      <td>23.67</td>\n",
              "      <td>2017.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19722</th>\n",
              "      <td>201701</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2638171</td>\n",
              "      <td>7337449</td>\n",
              "      <td>35.95</td>\n",
              "      <td>2017.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31959</th>\n",
              "      <td>201702</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1776768</td>\n",
              "      <td>7337449</td>\n",
              "      <td>24.22</td>\n",
              "      <td>2017.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32574</th>\n",
              "      <td>201703</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1807827</td>\n",
              "      <td>7337449</td>\n",
              "      <td>24.64</td>\n",
              "      <td>2017.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17650</th>\n",
              "      <td>201704</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1818094</td>\n",
              "      <td>7337449</td>\n",
              "      <td>24.78</td>\n",
              "      <td>2018.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>30078</th>\n",
              "      <td>201801</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1826350</td>\n",
              "      <td>7412566</td>\n",
              "      <td>24.64</td>\n",
              "      <td>2018.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18810</th>\n",
              "      <td>201802</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1857309</td>\n",
              "      <td>7412566</td>\n",
              "      <td>25.06</td>\n",
              "      <td>2018.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>31062</th>\n",
              "      <td>201803</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1875396</td>\n",
              "      <td>7412566</td>\n",
              "      <td>25.30</td>\n",
              "      <td>2018.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>27540</th>\n",
              "      <td>201804</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1876271</td>\n",
              "      <td>7412566</td>\n",
              "      <td>25.31</td>\n",
              "      <td>2019.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19157</th>\n",
              "      <td>201901</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1874506</td>\n",
              "      <td>7592871</td>\n",
              "      <td>24.69</td>\n",
              "      <td>2019.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15798</th>\n",
              "      <td>201902</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1890765</td>\n",
              "      <td>7592871</td>\n",
              "      <td>24.90</td>\n",
              "      <td>2019.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>28073</th>\n",
              "      <td>201903</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1915409</td>\n",
              "      <td>7592871</td>\n",
              "      <td>25.23</td>\n",
              "      <td>2019.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32490</th>\n",
              "      <td>201904</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1916910</td>\n",
              "      <td>7592871</td>\n",
              "      <td>25.25</td>\n",
              "      <td>2020.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>33078</th>\n",
              "      <td>202001</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>1957333</td>\n",
              "      <td>7732161</td>\n",
              "      <td>25.31</td>\n",
              "      <td>2020.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13832</th>\n",
              "      <td>202002</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2025140</td>\n",
              "      <td>7732161</td>\n",
              "      <td>26.19</td>\n",
              "      <td>2020.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32350</th>\n",
              "      <td>202003</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2069115</td>\n",
              "      <td>7732161</td>\n",
              "      <td>26.76</td>\n",
              "      <td>2020.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15648</th>\n",
              "      <td>202004</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2088680</td>\n",
              "      <td>7732161</td>\n",
              "      <td>27.01</td>\n",
              "      <td>2021.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8018</th>\n",
              "      <td>202101</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2139304</td>\n",
              "      <td>7823334</td>\n",
              "      <td>27.35</td>\n",
              "      <td>2021.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10290</th>\n",
              "      <td>202102</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2165658</td>\n",
              "      <td>7823334</td>\n",
              "      <td>27.68</td>\n",
              "      <td>2021.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6569</th>\n",
              "      <td>202103</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2157112</td>\n",
              "      <td>7823334</td>\n",
              "      <td>27.57</td>\n",
              "      <td>2021.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>906</th>\n",
              "      <td>202104</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2171274</td>\n",
              "      <td>7823334</td>\n",
              "      <td>27.75</td>\n",
              "      <td>2022.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11998</th>\n",
              "      <td>202201</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2240695</td>\n",
              "      <td>7873316</td>\n",
              "      <td>28.46</td>\n",
              "      <td>2022.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6908</th>\n",
              "      <td>202202</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2248809</td>\n",
              "      <td>7873316</td>\n",
              "      <td>28.56</td>\n",
              "      <td>2022.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>917</th>\n",
              "      <td>202203</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2261755</td>\n",
              "      <td>7873316</td>\n",
              "      <td>28.73</td>\n",
              "      <td>2022.75</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>628</th>\n",
              "      <td>202204</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2269823</td>\n",
              "      <td>7873316</td>\n",
              "      <td>28.83</td>\n",
              "      <td>2023.00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12251</th>\n",
              "      <td>202301</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2298520</td>\n",
              "      <td>7907281</td>\n",
              "      <td>29.07</td>\n",
              "      <td>2023.25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10346</th>\n",
              "      <td>202302</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2303696</td>\n",
              "      <td>7907281</td>\n",
              "      <td>29.13</td>\n",
              "      <td>2023.50</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2493</th>\n",
              "      <td>202303</td>\n",
              "      <td>BOGOTÁ D.C.</td>\n",
              "      <td>BOGOTÁ, D.C.</td>\n",
              "      <td>2251960</td>\n",
              "      <td>7907281</td>\n",
              "      <td>28.48</td>\n",
              "      <td>2023.75</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ff6f2f7f-bb39-409b-a935-7926af613e78')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ff6f2f7f-bb39-409b-a935-7926af613e78 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ff6f2f7f-bb39-409b-a935-7926af613e78');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-1d7f884d-53b6-40b3-8390-a869c7b2445a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-1d7f884d-53b6-40b3-8390-a869c7b2445a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-1d7f884d-53b6-40b3-8390-a869c7b2445a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "  <div id=\"id_eeb02ed3-fd83-4a42-bddd-e162d9f7c6e8\">\n",
              "    <style>\n",
              "      .colab-df-generate {\n",
              "        background-color: #E8F0FE;\n",
              "        border: none;\n",
              "        border-radius: 50%;\n",
              "        cursor: pointer;\n",
              "        display: none;\n",
              "        fill: #1967D2;\n",
              "        height: 32px;\n",
              "        padding: 0 0 0 0;\n",
              "        width: 32px;\n",
              "      }\n",
              "\n",
              "      .colab-df-generate:hover {\n",
              "        background-color: #E2EBFA;\n",
              "        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "        fill: #174EA6;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate {\n",
              "        background-color: #3B4455;\n",
              "        fill: #D2E3FC;\n",
              "      }\n",
              "\n",
              "      [theme=dark] .colab-df-generate:hover {\n",
              "        background-color: #434B5C;\n",
              "        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "        fill: #FFFFFF;\n",
              "      }\n",
              "    </style>\n",
              "    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('bogota_data')\"\n",
              "            title=\"Generate code using this dataframe.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "    <script>\n",
              "      (() => {\n",
              "      const buttonEl =\n",
              "        document.querySelector('#id_eeb02ed3-fd83-4a42-bddd-e162d9f7c6e8 button.colab-df-generate');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      buttonEl.onclick = () => {\n",
              "        google.colab.notebook.generateWithVariable('bogota_data');\n",
              "      }\n",
              "      })();\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "bogota_data",
              "summary": "{\n  \"name\": \"bogota_data\",\n  \"rows\": 32,\n  \"fields\": [\n    {\n      \"column\": \"A\\u00d1O_TRIMESTRE\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 32,\n        \"samples\": [\n          \"202301\",\n          \"201903\",\n          \"202104\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"DEPARTAMENTO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"BOGOT\\u00c1 D.C.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"MUNICIPIO\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          \"BOGOT\\u00c1, D.C.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"No. ACCESOS FIJOS A INTERNET\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 241119,\n        \"min\": 1610511,\n        \"max\": 2638171,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          2298520\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"POBLACI\\u00d3N DANE\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 236386,\n        \"min\": 7273265,\n        \"max\": 7907281,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          7873316\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"INDICE(%)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.682051152960505,\n        \"min\": 22.14,\n        \"max\": 35.95,\n        \"num_unique_values\": 30,\n        \"samples\": [\n          29.07\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"A\\u00d1O_TRIMESTRE_num\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 2.345207879911715,\n        \"min\": 2016.0,\n        \"max\": 2023.75,\n        \"num_unique_values\": 32,\n        \"samples\": [\n          2023.25\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 45
        }
      ]
    }
  ]
}